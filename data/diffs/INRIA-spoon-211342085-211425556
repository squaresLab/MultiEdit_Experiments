Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/spoon/refactoring/Refactoring.java after/src/main/java/spoon/refactoring/Refactoring.java
38a39,41
> 
> 		final String typeQFN = type.getQualifiedName();
> 
42c45,46
< 				return type.getQualifiedName().equals(reference.getQualifiedName());
---
> 				String refFQN = reference.getQualifiedName();
> 				return typeQFN.equals(refFQN);
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java after/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
94,95d93
< 			klass.setSimpleName(klass.getSimpleName().replaceAll("^[0-9]*", ""));
< 			klass.setParent(ret.getFactory().Package().getRootPackage());
96a95
> 			klass.setSimpleName(klass.getSimpleName().replaceAll("^[0-9]*", ""));
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java after/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java
45a46
> 
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java after/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java
20d19
< import spoon.reflect.declaration.CtElement;
26d24
< import spoon.reflect.declaration.ParentNotInitializedException;
133,136d130
< 		final CtField<T> ctField = lookupDynamically();
< 		if (ctField != null) {
< 			return ctField;
< 		}
138,159d131
< 	}
< 
< 	private CtField<T> lookupDynamically() {
< 		CtElement element = this;
< 		CtField optional = null;
< 		String name = getSimpleName();
< 		try {
< 			do {
< 				CtType type = element.getParent(CtType.class);
< 				if (type == null) {
< 					return null;
< 				}
< 				final CtField potential = type.getField(name);
< 				if (potential != null) {
< 					optional = potential;
< 				}
< 				element = type;
< 			} while (optional == null);
< 		} catch (ParentNotInitializedException e) {
< 			return null;
< 		}
< 		return optional;
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/spoon/test/field/FieldTest.java after/src/test/java/spoon/test/field/FieldTest.java
32a33,35
> import spoon.Launcher;
> import spoon.reflect.code.CtExpression;
> import spoon.reflect.code.CtFieldAccess;
33a37
> import spoon.reflect.code.CtReturn;
35a40
> import spoon.reflect.declaration.CtMethod;
38a44,45
> import spoon.support.reflect.eval.VisitorPartialEvaluator;
> import spoon.test.field.testclasses.A;
39a47
> import spoon.test.field.testclasses.BaseClass;
103a112,145
> 	}
> 
> 	@Test
> 	public void testGetDefaultExpression() throws Exception {
> 		Launcher spoon = new Launcher();
> 		spoon.addInputResource("./src/test/java/spoon/test/field/testclasses/A.java");
> 		spoon.addInputResource("./src/test/java/spoon/test/field/testclasses/BaseClass.java");
> 		spoon.buildModel();
> 
> 		final CtClass<A> aClass = spoon.getFactory().Class().get(A.class);
> 
> 		CtClass<A.ClassB> bClass = aClass.getFactory().Class().get(A.ClassB.class);
> 		List<CtMethod<?>> methods = bClass.getMethodsByName("getKey");
> 
> 		assertEquals(1, methods.size());
> 
> 		CtReturn<?> returnExpression = methods.get(0).getBody().getStatement(0);
> 
> 		CtFieldRead fieldRead = (CtFieldRead) returnExpression.getReturnedExpression();
> 
> 		assertEquals("spoon.test.field.testclasses.BaseClass.PREFIX", fieldRead.toString());
> 
> 		CtField<?> field = fieldRead.getVariable().getDeclaration();
> 
> 		CtClass<BaseClass> baseClass = aClass.getFactory().Class().get(BaseClass.class);
> 		CtField<?> expectedField = baseClass.getField("PREFIX");
> 
> 		assertEquals(expectedField, field);
> 
> 		VisitorPartialEvaluator visitorPartial = new VisitorPartialEvaluator();
> 
> 		Object retour = visitorPartial.evaluate(methods.get(0));
> 
> 		assertTrue(retour != null);
Only in after/src/test/java/spoon/test/field/testclasses: A.java
Only in after/src/test/java/spoon/test/field/testclasses: BaseClass.java
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/spoon/test/reference/CloneReferenceTest.java after/src/test/java/spoon/test/reference/CloneReferenceTest.java
4a5
> import spoon.refactoring.Refactoring;
6a8
> import spoon.reflect.declaration.CtField;
20a23
>         // contract: all variable references of the clone (but fields) should point to the variable of the clone
23c26
<         List<String> names = Arrays.asList("f1", "f2", "a", "b", "x", "field", "param", "e");
---
>         List<String> names = Arrays.asList("f1", "f2", "a", "b", "x", "param", "e");
43,44c46,48
<             CtVariable var2 = findReference(b, name).getDeclaration();
<             assertTrue(var1 == var2);
---
>             CtVariableReference refVar1 = findReference(b, name);
>             CtVariable var2 = refVar1.getDeclaration();
>             assertTrue("Var1 and var2 are not the same element", var1 == var2);
45a50,79
>     }
> 
>     @Test
>     public void testGetDeclarationOfFieldAfterClone() throws Exception {
>         // contract: all field references of the clone point to the old class
>         // behaviour changed on https://github.com/INRIA/spoon/pull/1215
>         Launcher spoon = new Launcher();
> 
>         String name = "field";
>         spoon.addInputResource("./src/test/resources/noclasspath/A2.java");
>         spoon.getEnvironment().setComplianceLevel(8);
>         spoon.getEnvironment().setNoClasspath(true);
>         spoon.buildModel();
> 
> 
>         final CtClass<Object> a = spoon.getFactory().Class().get("A2");
>         // test before clone
>         CtField oldVar1 = (CtField)findVariable(a, name);
>         CtField oldVar2 = (CtField)findReference(a, name).getDeclaration();
>         assertTrue(oldVar1 == oldVar2);
> 
>         CtClass b = a.clone();
> 
>         // test after clone
>         CtField var1 = (CtField)findVariable(b, name);
>         CtVariableReference refVar1 = findReference(b, name);
>         CtField var2 = (CtField)refVar1.getDeclaration();
>         assertTrue(var1 != var2);
>         assertTrue(var2 == oldVar1);
>         assertTrue(var1.getParent(CtClass.class) == b);
