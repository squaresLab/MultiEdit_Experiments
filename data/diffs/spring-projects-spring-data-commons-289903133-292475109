Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory.java after/src/main/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory.java
136c136,139
< 		return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith("java");
---
> 
> 		Class<?> type = entity.getType();
> 		return type.getClassLoader() != null
> 				&& (type.getPackage() == null || !type.getPackage().getName().startsWith("java"));
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactoryTests.java after/src/test/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactoryTests.java
16d15
< 
19a19
> import static org.junit.Assume.*;
38a39
> import org.springframework.util.StringUtils;
64c65,66
< 	public static List<Object[]> parameters() {
---
> 	@SuppressWarnings("unchecked")
> 	public static List<Object[]> parameters() throws ReflectiveOperationException {
81a84,88
> 		Class<Object> defaultPackageClass = (Class) Class.forName("TypeInDefaultPackage");
> 
> 		parameters
> 				.add(new Object[] { defaultPackageClass.newInstance(), "", defaultPackageClass, "Class in default package" });
> 
96a104,108
> 	@Test // DATACMNS-1201
> 	public void shouldSupportGeneratedPropertyAccessors() {
> 		assertThat(factory.isSupported(mappingContext.getRequiredPersistentEntity(bean.getClass()))).isTrue();
> 	}
> 
98a111,112
> 
> 		assumeTrue(StringUtils.hasText(propertyName));
