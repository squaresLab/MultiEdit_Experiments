Only in after/: bears.json
Only in after/ci-droid-tasks-consumer-services: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/ci-droid-tasks-consumer-services/src/main/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformService.java after/ci-droid-tasks-consumer-services/src/main/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformService.java
118c118,119
<             } else if (actionToReplicate.canContinueIfResourceDoesntExist()) {
---
>             }
>             else if (actionToReplicate.canContinueIfResourceDoesntExist()) {
120c121,122
<             } else {
---
>             }
>             else {
206c208,213
<         newPr.setTitle(action.getCommitMessage());
---
> 
>         PullRequestGitHubInteraction pullRequestGitHubInteraction=(PullRequestGitHubInteraction)action.getGitHubInteraction();
> 
>         String providedPrTitle=pullRequestGitHubInteraction.getPullRequestTitle();
> 
>         newPr.setTitle(providedPrTitle!=null ? providedPrTitle : branchName);
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/ci-droid-tasks-consumer-services/src/test/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformServiceTest.java after/ci-droid-tasks-consumer-services/src/test/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformServiceTest.java
230c230
<     public void continueIfExistingResourceisNull_whenActionPermitsIt() throws GitHubAuthorizationException {
---
>     public void continueIfExistingResourceIsNull_whenActionPermitsIt() throws GitHubAuthorizationException {
372a373,407
>     @Test
>     public void shouldCreatePRwithProvidedTitle() throws GitHubAuthorizationException, BranchAlreadyExistsException {
> 
>         mockPullRequestSpecificBehavior();
>         when(mockRemoteGitHub.createPullRequest(eq(REPO_FULL_NAME), any(PullRequestToCreate.class), anyString())).thenReturn(fakePullRequest);
> 
>         BulkActionToPerform bulkActionToPerform = bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR,"new feature branch")).build();
> 
>         actionToPerformService.perform(bulkActionToPerform);
> 
>         verify(mockRemoteGitHub, times(1)).createPullRequest(eq(REPO_FULL_NAME),
>                 newPrCaptor.capture(),
>                 eq(SOME_OAUTH_TOKEN));
> 
>         assertThat(newPrCaptor.getValue().getTitle()).isEqualTo("new feature branch");
>     }
> 
>     @Test
>     public void shouldCreatePRwithBranchName_whenPRtitleIsNotProvided() throws GitHubAuthorizationException, BranchAlreadyExistsException {
> 
>         mockPullRequestSpecificBehavior();
>         when(mockRemoteGitHub.createPullRequest(eq(REPO_FULL_NAME), any(PullRequestToCreate.class), anyString())).thenReturn(fakePullRequest);
> 
>         BulkActionToPerform bulkActionToPerform = bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR,null)).build();
> 
>         actionToPerformService.perform(bulkActionToPerform);
> 
>         verify(mockRemoteGitHub, times(1)).createPullRequest(eq(REPO_FULL_NAME),
>                 newPrCaptor.capture(),
>                 eq(SOME_OAUTH_TOKEN));
> 
>         assertThat(newPrCaptor.getValue().getTitle()).isEqualTo(branchNameToCreateForPR);
> 
>     }
> 
377c412
<         return bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR)).build();
---
>         return bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR,null)).build();
384c419
<         assertThat(actualPrToCreate.getTitle()).isEqualTo(expectedCommitMessage);
---
>         assertThat(actualPrToCreate.getTitle()).isEqualTo(branchNameToCreateForPR);
