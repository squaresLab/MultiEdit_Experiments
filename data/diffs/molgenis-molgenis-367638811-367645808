Only in after/: bears.json
Only in after/molgenis-data-postgresql: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/molgenis-data-postgresql/src/main/java/org/molgenis/data/postgresql/PostgreSqlEntityFactory.java after/molgenis-data-postgresql/src/main/java/org/molgenis/data/postgresql/PostgreSqlEntityFactory.java
195c195
< 			String[] postgreSqlMrefIds = (String[]) arrayValue.getArray();
---
> 			Object[] postgreSqlMrefIds = (Object[]) arrayValue.getArray();
202,203c202,203
< 					String mrefIdStr = postgreSqlMrefIds[i];
< 					Object mrefId = mrefIdStr != null ? convertMrefIdValue(mrefIdStr, idAttr) : null;
---
> 					Object mrefIdRaw = postgreSqlMrefIds[i];
> 					Object mrefId = mrefIdRaw != null ? convertMrefIdValue(mrefIdRaw.toString(), idAttr) : null;
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/molgenis-data-postgresql/src/test/java/org/molgenis/data/postgresql/PostgreSqlEntityFactoryTest.java after/molgenis-data-postgresql/src/test/java/org/molgenis/data/postgresql/PostgreSqlEntityFactoryTest.java
4a5
> import org.molgenis.data.meta.AttributeType;
58a60,92
> 				newArrayList(refEntity0, refEntity1));
> 		assertEquals(postgreSqlEntityFactory.createRowMapper(entityType, null).mapRow(rs, rowNum), entity);
> 		verify(entity).set(oneToManyAttrName, newArrayList(refEntity0, refEntity1));
> 	}
> 
> 	@Test
> 	public void createRowMapperOneToManyIntegerIds() throws Exception
> 	{
> 		Attribute refIdAttr = mock(Attribute.class);
> 		when(refIdAttr.getDataType()).thenReturn(AttributeType.INT);
> 
> 		EntityType refEntityMeta = mock(EntityType.class);
> 		when(refEntityMeta.getIdAttribute()).thenReturn(refIdAttr);
> 
> 		String oneToManyAttrName = "oneToManyAttr";
> 		Attribute oneToManyAttr = mock(Attribute.class);
> 		when(oneToManyAttr.getName()).thenReturn(oneToManyAttrName);
> 		when(oneToManyAttr.getDataType()).thenReturn(ONE_TO_MANY);
> 		when(oneToManyAttr.getRefEntity()).thenReturn(refEntityMeta);
> 
> 		EntityType entityType = mock(EntityType.class);
> 		when(entityType.getAtomicAttributes()).thenReturn(singleton(oneToManyAttr));
> 		ResultSet rs = mock(ResultSet.class);
> 		Array oneToManyArray = mock(Array.class);
> 		when(oneToManyArray.getArray()).thenReturn(new Integer[] { 0, 1 });
> 		when(rs.getArray(oneToManyAttrName)).thenReturn(oneToManyArray);
> 		int rowNum = 0;
> 
> 		Entity entity = mock(Entity.class);
> 		when(entityManager.createFetch(entityType, null)).thenReturn(entity);
> 		Entity refEntity1 = mock(Entity.class);
> 		Entity refEntity0 = mock(Entity.class);
> 		when(entityManager.getReferences(refEntityMeta, newArrayList(0, 1))).thenReturn(
