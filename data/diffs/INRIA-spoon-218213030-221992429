Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java after/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
643a644,646
> 			if (binding.actualType() instanceof MissingTypeBinding) {
> 				ref = getTypeReference(binding.actualType());
> 			}
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/spoon/test/imports/ImportTest.java after/src/test/java/spoon/test/imports/ImportTest.java
19a20
> import spoon.reflect.reference.CtExecutableReference;
53a55
> import static org.junit.Assert.assertSame;
196a199,229
> 	}
> 
> 	@Test
> 	public void testAnotherMissingImport() throws Exception {
> 		Launcher spoon = new Launcher();
> 		spoon.setArgs(new String[] {"--output-type", "nooutput" });
> 		Factory factory = spoon.createFactory();
> 		factory.getEnvironment().setNoClasspath(true);
> 		factory.getEnvironment().setLevel("OFF");
> 
> 		SpoonModelBuilder compiler = spoon.createCompiler(factory, SpoonResourceHelper.resources("./src/test/resources/import-resources/fr/inria/AnotherMissingImport.java"));
> 
> 		compiler.build();
> 		List<CtMethod<?>> methods = factory.getModel().getElements(new NameFilter<CtMethod<?>>("doSomething"));
> 
> 		CtTypeReference<?> type = methods.get(0).getParameters().get(0).getType();
> 		assertEquals("SomeType", type.getSimpleName());
> 		assertEquals("externallib", type.getPackage().getSimpleName());
> 
> 		CtMethod<?> mainMethod = factory.Class().getAll().get(0).getMethodsByName("main").get(0);
> 		List<CtStatement> statements = mainMethod.getBody().getStatements();
> 
> 		CtStatement invocationStatement = statements.get(1);
> 
> 		assertTrue(invocationStatement instanceof CtInvocation);
> 
> 		CtInvocation invocation = (CtInvocation) invocationStatement;
> 		CtExecutableReference executableReference = invocation.getExecutable();
> 
> 		assertEquals("fr.inria.AnotherMissingImport#doSomething(externallib.SomeType)", executableReference.getSignature());
> 		assertSame(methods.get(0), executableReference.getDeclaration());
