diff -r -x '*.config' -x '*git*' -x '*.md' -x '*.xml' d4j_buggy/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java d4j_patched/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java
869,871c869,873
<         final String numDesc = _longIntegerDesc(rawNum);
<         _reportError("Numeric value (%s) out of range of %s", numDesc,
<                 (expType == NR_LONG) ? "long" : "int");
---
>         if (expType == NR_INT) {
>             reportOverflowInt(rawNum);
>         } else {
>             reportOverflowLong(rawNum);
>         }
887c889
<                 _reportError("Numeric value ("+getText()+") out of range of int");
---
>                 reportOverflowInt(getText(), currentToken());
diff -r -x '*.config' -x '*git*' -x '*.md' -x '*.xml' d4j_buggy/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java d4j_patched/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java
565,566c565
<         _reportError(String.format("Numeric value (%s) out of range of int (%d - %s)",
<                 _longIntegerDesc(numDesc), Integer.MIN_VALUE, Integer.MAX_VALUE));
---
>         reportOverflowInt(numDesc, JsonToken.VALUE_NUMBER_INT);
569a569,573
>     protected void reportOverflowInt(String numDesc, JsonToken inputType) throws IOException {
>         _reportInputCoercion(String.format("Numeric value (%s) out of range of int (%d - %s)",
>                 _longIntegerDesc(numDesc), Integer.MIN_VALUE, Integer.MAX_VALUE),
>                 inputType, Integer.TYPE);
>     }
582,583c586
<         _reportError(String.format("Numeric value (%s) out of range of long (%d - %s)",
<                 _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE));
---
>         reportOverflowLong(numDesc, JsonToken.VALUE_NUMBER_INT);
586a590,594
>     protected void reportOverflowLong(String numDesc, JsonToken inputType) throws IOException {
>         _reportInputCoercion(String.format("Numeric value (%s) out of range of long (%d - %s)",
>                 _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE),
>                 inputType, Long.TYPE);
>     }
