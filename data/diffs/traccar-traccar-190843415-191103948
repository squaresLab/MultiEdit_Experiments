Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/org/traccar/protocol/H02FrameDecoder.java after/src/org/traccar/protocol/H02FrameDecoder.java
2c2
<  * Copyright 2013 - 2016 Anton Tananaev (anton@traccar.org)
---
>  * Copyright 2013 - 2017 Anton Tananaev (anton@traccar.org)
40c40
<         while (marker != '*' && marker != '$' && buf.readableBytes() > 0) {
---
>         while (marker != '*' && marker != '$' && marker != 'X' && buf.readableBytes() > 0) {
66a67,72
>             }
> 
>         } else if (marker == 'X') {
> 
>             if (buf.readableBytes() >= MESSAGE_SHORT) {
>                 return buf.readBytes(MESSAGE_SHORT);
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/org/traccar/protocol/H02ProtocolDecoder.java after/src/org/traccar/protocol/H02ProtocolDecoder.java
2c2
<  * Copyright 2012 - 2016 Anton Tananaev (anton@traccar.org)
---
>  * Copyright 2012 - 2017 Anton Tananaev (anton@traccar.org)
308,309d307
<         // handle X mode?
< 
318a317,318
>         } else if (marker.equals("X")) {
>             return null; // X mode
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/test/org/traccar/protocol/H02FrameDecoderTest.java after/test/org/traccar/protocol/H02FrameDecoderTest.java
42a43,65
>     @Test
>     public void testDecodeAlternative() throws Exception {
> 
>         H02FrameDecoder decoder = new H02FrameDecoder(0);
> 
>         Assert.assertEquals(
>                 binary("2a48512c343230363131393133302c4e42522c3130323430332c3233382c312c302c372c313131312c323236342c36332c313131312c323236352c35382c313131312c323236362c35302c313131312c333133352c33372c313131312c3630352c33332c313131312c343932302c33302c313131312c3630372c32382c3131303131372c46464646444646462c3623"),
>                 decoder.decode(null, null, binary("2a48512c343230363131393133302c4e42522c3130323430332c3233382c312c302c372c313131312c323236342c36332c313131312c323236352c35382c313131312c323236362c35302c313131312c333133352c33372c313131312c3630352c33332c313131312c343932302c33302c313131312c3630372c32382c3131303131372c46464646444646462c3623")));
> 
>         Assert.assertEquals(
>                 binary("2442061191301024031101175540227006012321670c000095fffffbffff001f00000001f800ee010000000032"),
>                 decoder.decode(null, null, binary("2442061191301024031101175540227006012321670c000095fffffbffff001f00000001f800ee010000000032")));
> 
>         Assert.assertEquals(
>                 binary("5800009814991024031101175540227006012321670c000095fffffbffff0033"),
>                 decoder.decode(null, null, binary("5800009814991024031101175540227006012321670c000095fffffbffff0033")));
> 
>         Assert.assertEquals(
>                 binary("2a48512c343230363131393133302c4e42522c3130323431362c3233382c312c302c372c313131312c323236342c35332c313131312c323236352c36302c313131312c323236362c34342c313131312c333133352c34332c313131312c3630352c33392c313131312c343932302c32392c313131312c3630372c32342c3131303131372c46464646464246462c3623"),
>                 decoder.decode(null, null, binary("2a48512c343230363131393133302c4e42522c3130323431362c3233382c312c302c372c313131312c323236342c35332c313131312c323236352c36302c313131312c323236362c34342c313131312c333133352c34332c313131312c3630352c33392c313131312c343932302c32392c313131312c3630372c32342c3131303131372c46464646464246462c3623")));
> 
>     }
> 
