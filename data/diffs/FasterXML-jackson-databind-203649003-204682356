Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java after/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
155a156,162
>         } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
>             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
>                 String str = p.getText().trim();
>                 if (str.isEmpty()) {
>                     return null;
>                 }
>             }
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java after/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java
131a132,141
>     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY,
>             property = "type")
>     static class AsProperty {
> 
>     }
> 
>     static class AsPropertyWrapper {
>         public AsProperty value;
>     }
> 
247a258,275
>     }
> 
>     public void testWithoutEmptyStringAsNullObject1533() throws Exception
>     {
>     	ObjectMapper mapper = new ObjectMapper().disable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
>         try {
>             mapper.readValue("{ \"value\": \"\" }", AsPropertyWrapper.class);
>             fail("Expected " + JsonMappingException.class);
>         } catch (JsonMappingException e) {
>             // expected
>         }
>     }
> 
>     public void testWithEmptyStringAsNullObject1533() throws Exception
>     {
>         ObjectMapper mapper = new ObjectMapper().enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
>         AsPropertyWrapper wrapper = mapper.readValue("{ \"value\": \"\" }", AsPropertyWrapper.class);
>         assertNull(wrapper.value);
