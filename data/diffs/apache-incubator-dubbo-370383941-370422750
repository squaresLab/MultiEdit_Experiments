Only in after/: bears.json
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ProtocolConfig.java after/dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ProtocolConfig.java
23d22
< import com.alibaba.dubbo.common.utils.ConfigUtils;
158d156
<         AbstractRegistryFactory.destroyAll();
160,165c158
<         // Wait for registry notification
<         try {
<             Thread.sleep(ConfigUtils.getServerShutdownTimeout());
<         } catch (InterruptedException e) {
<             logger.warn("Interrupted unexpectedly when waiting for registry notification during shutdown process!");
<         }
---
>         AbstractRegistryFactory.destroyAll();
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/AnnotationBean.java after/dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/AnnotationBean.java
114,120c114,125
<         for (ServiceConfig<?> serviceConfig : serviceConfigs) {
<             try {
<                 serviceConfig.unexport();
<             } catch (Throwable e) {
<                 logger.error(e.getMessage(), e);
<             }
<         }
---
> 
>         //  This will only be called for singleton scope bean, and expected to be called by spring shutdown hook when BeanFactory/ApplicationContext destroys.
>         //  We will guarantee dubbo related resources being released with dubbo shutdown hook.
> 
>         //  for (ServiceConfig<?> serviceConfig : serviceConfigs) {
>         //      try {
>         //          serviceConfig.unexport();
>         //      } catch (Throwable e) {
>         //          logger.error(e.getMessage(), e);
>         //      }
>         //  }
> 
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java after/dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/support/header/HeaderExchangeServer.java
32,33d31
< import com.alibaba.dubbo.remoting.exchange.support.DefaultFuture;
< 
88c86,92
<             if (DefaultFuture.hasFuture(channel)) {
---
> 
>             /**
>              *  If there are any client connections,
>              *  our server should be running.
>              */
> 
>             if (channel.isConnected()) {
Only in after/dubbo-rpc/dubbo-rpc-dubbo: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java after/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java
22a23
> import com.alibaba.dubbo.common.utils.ConfigUtils;
23a25,26
> import com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeServer;
> import com.alibaba.dubbo.rpc.Exporter;
78a82,105
>     public void test_normal_channel_close_wait_gracefully() throws Exception {
> 
>         URL url = URL.valueOf("dubbo://127.0.0.1:20883/hi?scope=true&lazy=false");
>         Exporter<IDemoService> exporter = ProtocolUtils.export(new DemoServiceImpl(), IDemoService.class, url);
>         Exporter<IDemoService> exporter0 = ProtocolUtils.export(new DemoServiceImpl0(), IDemoService.class, url);
> 
>         DubboInvoker<?> invoker = (DubboInvoker<?>) protocol.refer(IDemoService.class, url);
> 
>         long start = System.currentTimeMillis();
> 
>         try{
>             System.setProperty(Constants.SHUTDOWN_WAIT_KEY, "2000");
>             protocol.destroy();
>         }finally {
>             System.getProperties().remove(Constants.SHUTDOWN_WAIT_KEY);
>         }
> 
>         long waitTime = System.currentTimeMillis() - start;
> 
>         Assert.assertTrue(waitTime >= 2000);
>         Assert.assertEquals(false, invoker.isAvailable());
>     }
> 
>     @Test
127a155,160
>         public String get() {
>             return "ok";
>         }
>     }
> 
>     public class DemoServiceImpl0 implements IDemoService {
