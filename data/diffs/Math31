diff -r -x '*.config' -x '*git*' -x '*.md' -x '*.xml' d4j_buggy/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java d4j_patched/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java
134,135d133
<         double p0 = 1.0;
<         double q1 = 1.0;
143,166c141,147
<             double cN = a * hPrev + b * p0;
<             double q2 = a * q1 + b * dPrev;
<             if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
<                 double scaleFactor = 1d;
<                 double lastScaleFactor = 1d;
<                 final int maxPower = 5;
<                 final double scale = FastMath.max(a,b);
<                 if (scale <= 0) {  // Can't scale
<                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
<                 }
<                 for (int i = 0; i < maxPower; i++) {
<                     lastScaleFactor = scaleFactor;
<                     scaleFactor *= scale;
<                     if (a != 0.0 && a > b) {
<                         cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
<                         q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
<                     } else if (b != 0) {
<                         cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
<                         q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
<                     }
<                     if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
<                         break;
<                     }
<                 }
---
>             double dN = a + b * dPrev;
>             if (Precision.equals(dN, 0.0, small)) {
>                 dN = small;
>             }
>             double cN = a + b / cPrev;
>             if (Precision.equals(cN, 0.0, small)) {
>                 cN = small;
169,170c150,152
<             final double deltaN = cN / q2 / cPrev;
<             hN = cPrev * deltaN;
---
>             dN = 1 / dN;
>             final double deltaN = cN * dN;
>             hN = hPrev * deltaN;
185,189c167,169
<             dPrev = q1;
<             cPrev = cN / q2;
<             p0 = hPrev;
<             hPrev = cN;
<             q1 = q2;
---
>             dPrev = dN;
>             cPrev = cN;
>             hPrev = hN;
