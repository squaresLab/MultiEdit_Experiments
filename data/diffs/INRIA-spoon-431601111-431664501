Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java after/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
96a97
> 		ret.setParent(null);
112c113,119
< 		return ret.getReturnedExpression();
---
> 		CtExpression<T> returnedExpression = ret.getReturnedExpression();
> 
> 		// this compiled expression is not in a parent, ready to be used
> 		returnedExpression.delete();
> 		returnedExpression.setParent(null);
> 
> 		return returnedExpression;
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/spoon/test/serializable/SerializableTest.java after/src/test/java/spoon/test/serializable/SerializableTest.java
27a28
> 		// contract: one can also serialize snippets
33c34
< 		CtStatement des = (CtStatement) ByteSerialization.deserialize(ser);
---
> 		CtStatement deserializedSta2 = (CtStatement) ByteSerialization.deserialize(ser);
36c37
< 		String sigAf = des.getShortRepresentation();
---
> 		String sigAf = deserializedSta2.getShortRepresentation();
39c40,42
< 		assertNotNull(typeBef);
---
> 
> 		// sta2 comes from a snippet, and snippets have no parent (#2318)
> 		assertNull(typeBef);
43c46
< 		des.setFactory(factory);
---
> 		deserializedSta2.setFactory(factory);
45c48
< 		String toSgAf = des.toString();
---
> 		String toSgAf = deserializedSta2.toString();
49,58c52
< 		CtType<?> typeDes = des.getParent(CtType.class);
< 		assertNotNull(typeDes);
< 		//After deserialization, getDeclaringType throws an exception
< 		CtType<?> decl =  typeDes.getDeclaringType();
< 		assertNull(decl);
< 
< 		CtPackage parentOriginal = (CtPackage) typeBef.getParent();
< 		CtPackage parentDeser = (CtPackage) typeDes.getParent();
< 
< 		assertEquals(CtPackage.TOP_LEVEL_PACKAGE_NAME,parentOriginal.getSimpleName());
---
> 		CtType<?> typeDes = deserializedSta2.getParent(CtType.class);
60c54,56
< 		assertEquals(CtPackage.TOP_LEVEL_PACKAGE_NAME,parentDeser.getSimpleName());
---
> 		// typeDes comes from a serialized snippet, and snippets have no parent (#2318)
> 		assertNull(typeDes);
> 		assertFalse(deserializedSta2.isParentInitialized());
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/spoon/test/snippets/SnippetTest.java after/src/test/java/spoon/test/snippets/SnippetTest.java
9a10
> import spoon.reflect.code.CtStatement;
17a19,20
> import static org.junit.Assert.assertFalse;
> import static org.junit.Assert.assertNull;
57a61,64
> 
> 		// contract: the element is fready to be used, not in any statement (#2318)
> 		assertFalse(compile.isParentInitialized());
> 
76,83c83,89
< 		try {
< 			// Add a class in the context.
< 			factory.Class().create("AClass");
< 			// Try to compile a snippet with a context.
< 			factory.Code().createCodeSnippetStatement("int i = 1;").compile();
< 		} catch (ClassCastException e) {
< 			fail();
< 		}
---
> 		// Add a class in the context.
> 		factory.Class().create("AClass");
> 		// Try to compile a snippet with a context.
> 		CtStatement statement = factory.Code().createCodeSnippetStatement("int i = 1;").compile();
> 
> 		// contract: the element is fready to be used, not in any statement (#2318)
> 		assertFalse(statement.isParentInitialized());
