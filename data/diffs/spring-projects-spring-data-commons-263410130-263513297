Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java after/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java
184a185,193
> 	 * @see org.springframework.data.util.TypeDiscoverer#specialize(org.springframework.data.util.ClassTypeInformation)
> 	 */
> 	@Override
> 	public TypeInformation<?> specialize(ClassTypeInformation<?> type) {
> 		return isResolvedCompletely() ? type : super.specialize(type);
> 	}
> 
> 	/*
> 	 * (non-Javadoc)
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/org/springframework/data/util/ClassTypeInformationUnitTests.java after/src/test/java/org/springframework/data/util/ClassTypeInformationUnitTests.java
109c109
< 		assertThat(property.getComponentType().getType(), is(Matchers.<Class<?>>equalTo(Object.class)));
---
> 		assertThat(property.getComponentType().getType(), is(Matchers.<Class<?>> equalTo(Object.class)));
415a416,427
> 	@Test // DATACMNS-1138
> 	@SuppressWarnings("rawtypes")
> 	public void usesTargetTypeForWildcardedBaseOnSpecialization() {
> 
> 		ClassTypeInformation<WildcardedWrapper> wrapper = ClassTypeInformation.from(WildcardedWrapper.class);
> 		ClassTypeInformation<SomeConcrete> concrete = ClassTypeInformation.from(SomeConcrete.class);
> 
> 		TypeInformation<?> property = wrapper.getProperty("wildcarded");
> 
> 		assertThat(property.specialize(concrete), is((TypeInformation) concrete));
> 	}
> 
613a626,637
> 
> 	// DATACMNS-1138
> 
> 	static class SomeGeneric<T> {
> 		T value;
> 	}
> 
> 	static class SomeConcrete extends SomeGeneric<String> {}
> 
> 	static class WildcardedWrapper {
> 		SomeGeneric<?> wildcarded;
> 	}
