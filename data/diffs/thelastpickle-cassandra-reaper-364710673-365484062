Only in after/: bears.json
Only in after/src/server: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/server/src/main/java/io/cassandrareaper/resources/view/NodesStatus.java after/src/server/src/main/java/io/cassandrareaper/resources/view/NodesStatus.java
44c44
<   private static final Pattern ENDPOINT_NAME_PATTERN
---
>   private static final Pattern ENDPOINT_NAME_PATTERN_IP4
45a46,47
>   private static final Pattern ENDPOINT_NAME_PATTERN_IP6
>           = Pattern.compile("^([0-9:a-fA-F\\]\\[]{3,41})", Pattern.MULTILINE | Pattern.DOTALL);
184c186
<     ENDPOINT_NAME_PATTERNS.add(ENDPOINT_NAME_PATTERN);
---
>     ENDPOINT_NAME_PATTERNS.addAll(Arrays.asList(ENDPOINT_NAME_PATTERN_IP4, ENDPOINT_NAME_PATTERN_IP6));
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/server/src/test/java/io/cassandrareaper/resources/view/NodesStatusTest.java after/src/server/src/test/java/io/cassandrareaper/resources/view/NodesStatusTest.java
21a22
> import com.google.common.base.Preconditions;
32,33c33,39
<   public void testParseEndpoint22StatusString() {
<     Map<String, String> simpleStates = Maps.newHashMap();
---
>   public void testParseIPv4Endpoint22StatusString() {
>     testParseEndpoint22StatusString(
>         "127.0.0.1",
>         "/127.0.0.1",
>         "/127.0.0.2",
>         "/127.0.0.3");
>   }
35,105c41,119
<     String endpointsStatusString =
<         "/127.0.0.1\n"
<         + "  generation:1496849190\n"
<         + "  heartbeat:1231900\n"
<         + "  STATUS:14:NORMAL,-9223372036854775808\n"
<         + "  LOAD:1231851:4043215.0\n"
<         + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:6:datacenter1\n"
<         + "  RACK:8:rack1\n"
<         + "  RELEASE_VERSION:4:3.0.8\n"
<         + "  RPC_ADDRESS:3:127.0.0.1\n"
<         + "  SEVERITY:1231899:0.0\n"
<         + "  NET_VERSION:1:10\n"
<         + "  HOST_ID:2:f091f82b-ce2c-40ee-b30c-6e761e94e821\n"
<         + "  RPC_READY:16:true\n"
<         + "  TOKENS:13:<hidden>\n"
<         + "/127.0.0.2\n"
<         + "  generation:1497347537\n"
<         + "  heartbeat:27077\n"
<         + "  STATUS:14:NORMAL,-3074457345618258603\n"
<         + "  LOAD:1231851:3988763.0\n"
<         + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:6:datacenter2\n"
<         + "  RACK:8:rack2\n"
<         + "  RELEASE_VERSION:4:3.0.8\n"
<         + "  RPC_ADDRESS:3:127.0.0.2\n"
<         + "  SEVERITY:1231899:0.0\n"
<         + "  NET_VERSION:1:10\n"
<         + "  HOST_ID:2:08f819b5-d96f-444e-9d4d-ec4136e1b716\n"
<         + "  RPC_READY:16:true\n"
<         + "  TOKENS:13:<hidden>\n"
<         + "/127.0.0.3\n"
<         + "  generation:1496849191\n"
<         + "  heartbeat:1230183\n"
<         + "  STATUS:16:NORMAL,3074457345618258602\n"
<         + "  LOAD:1230134:3.974144E6\n"
<         + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:6:us-west-1\n"
<         + "  RACK:8:rack3\n"
<         + "  RELEASE_VERSION:4:3.0.8\n"
<         + "  RPC_ADDRESS:3:127.0.0.3\n"
<         + "  SEVERITY:1230182:0.0\n"
<         + "  NET_VERSION:1:10\n"
<         + "  HOST_ID:2:20769fed-7916-4b7a-a729-8b99bcdc9b95\n"
<         + "  RPC_READY:44:true\n"
<         + "  TOKENS:15:<hidden>\n";
< 
<     simpleStates.put("/127.0.0.3", "UP");
<     simpleStates.put("/127.0.0.1", "DOWN");
< 
<     NodesStatus nodesStatus = new NodesStatus("127.0.0.1", endpointsStatusString, simpleStates);
< 
<     assertEquals(nodesStatus.endpointStates.size(), 1);
<     assertEquals(nodesStatus.endpointStates.get(0).sourceNode, "127.0.0.1");
< 
<     Map<String,Map<String,List<EndpointState>>> endpoints = nodesStatus.endpointStates.get(0).endpoints;
<     assertEquals(endpoints.get("datacenter1").keySet().size(), 1);
<     assertEquals(endpoints.get("datacenter1").get("rack1").size(), 1);
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).status, "NORMAL - DOWN");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).status, "NORMAL - UNKNOWN");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).status, "NORMAL - UP");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).endpoint, "127.0.0.1");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).hostId, "f091f82b-ce2c-40ee-b30c-6e761e94e821");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).tokens, "13");
<     assertTrue(endpoints.get("datacenter1").get("rack1").get(0).severity.equals(0.0));
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).releaseVersion, "3.0.8");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).dc, "datacenter2");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).rack, "rack2");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).dc, "us-west-1");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).rack, "rack3");
<     assertTrue(endpoints.get("us-west-1").get("rack3").get(0).load.equals(3974144.0));
---
>   @Test
>   public void testParseIPv4Endpoint22WithHostnameStatusString() {
>     testParseEndpoint22StatusString(
>         "127.0.0.1",
>         "localhost/127.0.0.1",
>         "/127.0.0.2",
>         "localhost3/127.0.0.3");
>   }
> 
>   @Test
>   public void testParseIPv6Endpoint22StatusString() {
>     testParseEndpoint22StatusString(
>         "/::1",
>         "/2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b20",
>         "/[2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b21]",
>         "/2a:6:b0:61aa:34b3:7805:1d3d:32");
>   }
> 
>   @Test
>   public void testParseIPv6Endpoint22WithHostnameStatusString() {
>     testParseEndpoint22StatusString(
>         "/::1",
>         "a.example.com/2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b20",
>         "b.example.com/[2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b21]",
>         "c.example.com/2a:6:b0:61aa:34b3:7805:1d3d:32");
>   }
> 
>   @Test
>   public void testParseIPv4Endpoint21StatusString() {
>     testParseEndpoint21StatusString(
>         "127.0.0.1",
>         "/127.0.0.1",
>         "/127.0.0.2",
>         "/127.0.0.3");
>   }
> 
>   @Test
>   public void testParseIPv4Endpoint21WithHostnameStatusString() {
>     testParseEndpoint21StatusString(
>         "127.0.0.1",
>         "localhost1/127.0.0.1",
>         "localhost2/127.0.0.2",
>         "localhost3/127.0.0.3");
>   }
> 
>   @Test
>   public void testParseIPv6Endpoint21StatusString() {
>     testParseEndpoint21StatusString(
>         "::1",
>         "/::1",
>         "/[2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b20]",
>         "/2a:6:b0:61aa:34b3:7805:1d3d:32");
>   }
> 
>   @Test
>   public void testParseIPv6Endpoint21WithHostnameStatusString() {
>     testParseEndpoint21StatusString(
>         "::1",
>         "localhost/::1",
>         "a.example.com/[2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b20]",
>         "b.example.com/2a:6:b0:61aa:34b3:7805:1d3d:32");
>   }
> 
>   @Test
>   public void testParseIPv4EndpointCassandraStatusString() {
>     testParseEndpointCassandraStatusString(
>         "10.0.0.1",
>         "/10.0.0.1",
>         "/10.0.0.2",
>         "/10.0.0.3");
>   }
> 
>   @Test
>   public void testParseIPv4EndpointCassandraWithHostnameStatusString() {
>     testParseEndpointCassandraStatusString(
>         "10.0.0.1",
>         "one/10.0.0.1",
>         "two/10.0.0.2",
>         "three/10.0.0.3");
109c123,141
<   public void testParseEndpoint22WithHostnameStatusString() {
---
>   public void testParseIPv6EndpointCassandraStatusString() {
>     testParseEndpointCassandraStatusString(
>         "/::1",
>         "/2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b20",
>         "/[2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b21]",
>         "/2a:6:b0:61aa:34b3:7805:1d3d:32");
>   }
> 
>   @Test
>   public void testParseIPv6EndpointCassandraWithHostnameStatusString() {
>     testParseEndpointCassandraStatusString(
>         "/::1",
>         "a.example.com/2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b20",
>         "b.example.com/[2a02:6b8f:b010:61aa:34b3:7805:1d3d:3b21]",
>         "c.example.com/2a:6:b0:61aa:34b3:7805:1d3d:32");
>   }
> 
>   private void testParseEndpoint22StatusString(String sourceNode,
>                                                String endpoint1, String endpoint2, String endpoint3) {
113,175c145,207
<         "localhost/127.0.0.1\n"
<         + "  generation:1496849190\n"
<         + "  heartbeat:1231900\n"
<         + "  STATUS:14:NORMAL,-9223372036854775808\n"
<         + "  LOAD:1231851:4043215.0\n"
<         + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:6:datacenter1\n"
<         + "  RACK:8:rack1\n"
<         + "  RELEASE_VERSION:4:3.0.8\n"
<         + "  RPC_ADDRESS:3:127.0.0.1\n"
<         + "  SEVERITY:1231899:0.0\n"
<         + "  NET_VERSION:1:10\n"
<         + "  HOST_ID:2:f091f82b-ce2c-40ee-b30c-6e761e94e821\n"
<         + "  RPC_READY:16:true\n"
<         + "  TOKENS:13:<hidden>\n"
<         + "/127.0.0.2\n"
<         + "  generation:1497347537\n"
<         + "  heartbeat:27077\n"
<         + "  STATUS:14:NORMAL,-3074457345618258603\n"
<         + "  LOAD:1231851:3988763.0\n"
<         + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:6:datacenter2\n"
<         + "  RACK:8:rack2\n"
<         + "  RELEASE_VERSION:4:3.0.8\n"
<         + "  RPC_ADDRESS:3:127.0.0.2\n"
<         + "  SEVERITY:1231899:0.0\n"
<         + "  NET_VERSION:1:10\n"
<         + "  HOST_ID:2:08f819b5-d96f-444e-9d4d-ec4136e1b716\n"
<         + "  RPC_READY:16:true\n"
<         + "  TOKENS:13:<hidden>\n"
<         + "localhost3/127.0.0.3\n"
<         + "  generation:1496849191\n"
<         + "  heartbeat:1230183\n"
<         + "  STATUS:16:NORMAL,3074457345618258602\n"
<         + "  LOAD:1230134:3.974144E6\n"
<         + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:6:us-west-1\n"
<         + "  RACK:8:rack3\n"
<         + "  RELEASE_VERSION:4:3.0.8\n"
<         + "  RPC_ADDRESS:3:127.0.0.3\n"
<         + "  SEVERITY:1230182:0.0\n"
<         + "  NET_VERSION:1:10\n"
<         + "  HOST_ID:2:20769fed-7916-4b7a-a729-8b99bcdc9b95\n"
<         + "  RPC_READY:44:true\n"
<         + "  TOKENS:15:<hidden>\n";
< 
<     simpleStates.put("localhost3/127.0.0.3", "UP");
<     simpleStates.put("localhost/127.0.0.1", "DOWN");
< 
<     NodesStatus nodesStatus = new NodesStatus("127.0.0.1", endpointsStatusString, simpleStates);
< 
<     assertEquals(nodesStatus.endpointStates.size(), 1);
<     assertEquals(nodesStatus.endpointStates.get(0).sourceNode, "127.0.0.1");
< 
<     Map<String,Map<String,List<EndpointState>>> endpoints = nodesStatus.endpointStates.get(0).endpoints;
<     assertEquals(endpoints.get("datacenter1").keySet().size(), 1);
<     assertEquals(endpoints.get("datacenter1").get("rack1").size(), 1);
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).status, "NORMAL - DOWN");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).status, "NORMAL - UNKNOWN");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).status, "NORMAL - UP");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).endpoint, "127.0.0.1");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).hostId, "f091f82b-ce2c-40ee-b30c-6e761e94e821");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).tokens, "13");
---
>         endpoint1 + "\n"
>             + "  generation:1496849190\n"
>             + "  heartbeat:1231900\n"
>             + "  STATUS:14:NORMAL,-9223372036854775808\n"
>             + "  LOAD:1231851:4043215.0\n"
>             + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
>             + "  DC:6:datacenter1\n"
>             + "  RACK:8:rack1\n"
>             + "  RELEASE_VERSION:4:3.0.8\n"
>             + "  RPC_ADDRESS:3:127.0.0.1\n"
>             + "  SEVERITY:1231899:0.0\n"
>             + "  NET_VERSION:1:10\n"
>             + "  HOST_ID:2:f091f82b-ce2c-40ee-b30c-6e761e94e821\n"
>             + "  RPC_READY:16:true\n"
>             + "  TOKENS:13:<hidden>\n"
>             + endpoint2 + "\n"
>             + "  generation:1497347537\n"
>             + "  heartbeat:27077\n"
>             + "  STATUS:14:NORMAL,-3074457345618258603\n"
>             + "  LOAD:1231851:3988763.0\n"
>             + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
>             + "  DC:6:datacenter2\n"
>             + "  RACK:8:rack2\n"
>             + "  RELEASE_VERSION:4:3.0.8\n"
>             + "  RPC_ADDRESS:3:127.0.0.2\n"
>             + "  SEVERITY:1231899:0.0\n"
>             + "  NET_VERSION:1:10\n"
>             + "  HOST_ID:2:08f819b5-d96f-444e-9d4d-ec4136e1b716\n"
>             + "  RPC_READY:16:true\n"
>             + "  TOKENS:13:<hidden>\n"
>             + endpoint3 + "\n"
>             + "  generation:1496849191\n"
>             + "  heartbeat:1230183\n"
>             + "  STATUS:16:NORMAL,3074457345618258602\n"
>             + "  LOAD:1230134:3.974144E6\n"
>             + "  SCHEMA:10:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
>             + "  DC:6:us-west-1\n"
>             + "  RACK:8:rack3\n"
>             + "  RELEASE_VERSION:4:3.0.8\n"
>             + "  RPC_ADDRESS:3:127.0.0.3\n"
>             + "  SEVERITY:1230182:0.0\n"
>             + "  NET_VERSION:1:10\n"
>             + "  HOST_ID:2:20769fed-7916-4b7a-a729-8b99bcdc9b95\n"
>             + "  RPC_READY:44:true\n"
>             + "  TOKENS:15:<hidden>\n";
> 
>     simpleStates.put(endpoint1, "DOWN");
>     simpleStates.put(endpoint3, "UP");
> 
>     NodesStatus nodesStatus = new NodesStatus(sourceNode, endpointsStatusString, simpleStates);
> 
>     assertEquals(1, nodesStatus.endpointStates.size());
>     assertEquals(sourceNode, nodesStatus.endpointStates.get(0).sourceNode);
> 
>     Map<String, Map<String, List<EndpointState>>> endpoints = nodesStatus.endpointStates.get(0).endpoints;
>     assertEquals(1, endpoints.get("datacenter1").keySet().size());
>     assertEquals(1, endpoints.get("datacenter1").get("rack1").size());
>     assertEquals("NORMAL - DOWN", endpoints.get("datacenter1").get("rack1").get(0).status);
>     assertEquals("NORMAL - UNKNOWN", endpoints.get("datacenter2").get("rack2").get(0).status);
>     assertEquals("NORMAL - UP", endpoints.get("us-west-1").get("rack3").get(0).status);
>     assertEquals(afterSlash(endpoint1), endpoints.get("datacenter1").get("rack1").get(0).endpoint);
>     assertEquals("f091f82b-ce2c-40ee-b30c-6e761e94e821", endpoints.get("datacenter1").get("rack1").get(0).hostId);
>     assertEquals("13", endpoints.get("datacenter1").get("rack1").get(0).tokens);
177,181c209,214
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).releaseVersion, "3.0.8");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).dc, "datacenter2");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).rack, "rack2");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).dc, "us-west-1");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).rack, "rack3");
---
>     assertEquals("3.0.8", endpoints.get("datacenter1").get("rack1").get(0).releaseVersion);
>     assertEquals("datacenter2", endpoints.get("datacenter2").get("rack2").get(0).dc);
>     assertEquals("rack2", endpoints.get("datacenter2").get("rack2").get(0).rack);
>     assertEquals("us-west-1", endpoints.get("us-west-1").get("rack3").get(0).dc);
>     assertEquals("rack3", endpoints.get("us-west-1").get("rack3").get(0).rack);
>     assertEquals(afterSlash(endpoint3), endpoints.get("us-west-1").get("rack3").get(0).endpoint);
182a216,219
> 
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint1)));
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint2)));
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint3)));
185,186c222,223
<   @Test
<   public void testParseEndpoint21StatusString() {
---
>   private void testParseEndpoint21StatusString(String sourceNode,
>                                                String endpoint1, String endpoint2, String endpoint3) {
190,250c227,287
<         "/127.0.0.1\n"
<         + "  generation:1496849190\n"
<         + "  heartbeat:1231900\n"
<         + "  STATUS:NORMAL,-9223372036854775808\n"
<         + "  LOAD:4043215.0\n"
<         + "  SCHEMA:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:datacenter1\n"
<         + "  RACK:rack1\n"
<         + "  RELEASE_VERSION:3.0.8\n"
<         + "  RPC_ADDRESS:127.0.0.1\n"
<         + "  SEVERITY:0.0\n"
<         + "  NET_VERSION:10\n"
<         + "  HOST_ID:f091f82b-ce2c-40ee-b30c-6e761e94e821\n"
<         + "  RPC_READY:true\n"
<         + "  TOKENS:<hidden>\n"
<         + "/127.0.0.2\n"
<         + "  generation:1497347537\n"
<         + "  heartbeat:27077\n"
<         + "  STATUS:NORMAL,-3074457345618258603\n"
<         + "  LOAD:3988763.0\n"
<         + "  SCHEMA:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:datacenter2\n"
<         + "  RACK:rack2\n"
<         + "  RELEASE_VERSION:3.0.8\n"
<         + "  RPC_ADDRESS:127.0.0.2\n"
<         + "  SEVERITY:0.0\n"
<         + "  NET_VERSION:10\n"
<         + "  HOST_ID:08f819b5-d96f-444e-9d4d-ec4136e1b716\n"
<         + "  RPC_READY:true\n"
<         + "/127.0.0.3\n"
<         + "  generation:1496849191\n"
<         + "  heartbeat:1230183\n"
<         + "  STATUS:NORMAL,3074457345618258602\n"
<         + "  LOAD:3.974144E6\n"
<         + "  SCHEMA:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
<         + "  DC:us-west-1\n"
<         + "  RACK:rack3\n"
<         + "  RELEASE_VERSION:3.0.8\n"
<         + "  RPC_ADDRESS:127.0.0.3\n"
<         + "  SEVERITY:0.0\n"
<         + "  NET_VERSION:10\n"
<         + "  HOST_ID:20769fed-7916-4b7a-a729-8b99bcdc9b95\n"
<         + "  RPC_READY:true\n"
<         + "  TOKENS:<hidden>\n";
< 
<     simpleStates.put("/127.0.0.3", "UP");
<     simpleStates.put("/127.0.0.1", "DOWN");
< 
<     NodesStatus nodesStatus = new NodesStatus("127.0.0.1", endpointsStatusString, simpleStates);
< 
<     assertEquals(nodesStatus.endpointStates.size(), 1);
<     assertEquals(nodesStatus.endpointStates.get(0).sourceNode, "127.0.0.1");
< 
<     Map<String,Map<String,List<EndpointState>>> endpoints = nodesStatus.endpointStates.get(0).endpoints;
<     assertEquals(endpoints.get("datacenter1").keySet().size(), 1);
<     assertEquals(endpoints.get("datacenter1").get("rack1").size(), 1);
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).status, "NORMAL - DOWN");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).status, "NORMAL - UNKNOWN");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).status, "NORMAL - UP");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).endpoint, "127.0.0.1");
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).hostId, "f091f82b-ce2c-40ee-b30c-6e761e94e821");
---
>         endpoint1 + "\n"
>             + "  generation:1496849190\n"
>             + "  heartbeat:1231900\n"
>             + "  STATUS:NORMAL,-9223372036854775808\n"
>             + "  LOAD:4043215.0\n"
>             + "  SCHEMA:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
>             + "  DC:datacenter1\n"
>             + "  RACK:rack1\n"
>             + "  RELEASE_VERSION:3.0.8\n"
>             + "  RPC_ADDRESS:127.0.0.1\n"
>             + "  SEVERITY:0.0\n"
>             + "  NET_VERSION:10\n"
>             + "  HOST_ID:f091f82b-ce2c-40ee-b30c-6e761e94e821\n"
>             + "  RPC_READY:true\n"
>             + "  TOKENS:<hidden>\n"
>             + endpoint2 + "\n"
>             + "  generation:1497347537\n"
>             + "  heartbeat:27077\n"
>             + "  STATUS:NORMAL,-3074457345618258603\n"
>             + "  LOAD:3988763.0\n"
>             + "  SCHEMA:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
>             + "  DC:datacenter2\n"
>             + "  RACK:rack2\n"
>             + "  RELEASE_VERSION:3.0.8\n"
>             + "  RPC_ADDRESS:127.0.0.2\n"
>             + "  SEVERITY:0.0\n"
>             + "  NET_VERSION:10\n"
>             + "  HOST_ID:08f819b5-d96f-444e-9d4d-ec4136e1b716\n"
>             + "  RPC_READY:true\n"
>             + endpoint3 + "\n"
>             + "  generation:1496849191\n"
>             + "  heartbeat:1230183\n"
>             + "  STATUS:NORMAL,3074457345618258602\n"
>             + "  LOAD:3.974144E6\n"
>             + "  SCHEMA:2de0af6a-bf86-38e0-b62b-474ff6aefb51\n"
>             + "  DC:us-west-1\n"
>             + "  RACK:rack3\n"
>             + "  RELEASE_VERSION:3.0.8\n"
>             + "  RPC_ADDRESS:127.0.0.3\n"
>             + "  SEVERITY:0.0\n"
>             + "  NET_VERSION:10\n"
>             + "  HOST_ID:20769fed-7916-4b7a-a729-8b99bcdc9b95\n"
>             + "  RPC_READY:true\n"
>             + "  TOKENS:<hidden>\n";
> 
>     simpleStates.put(endpoint1, "DOWN");
>     simpleStates.put(endpoint3, "UP");
> 
>     NodesStatus nodesStatus = new NodesStatus(sourceNode, endpointsStatusString, simpleStates);
> 
>     assertEquals(1, nodesStatus.endpointStates.size());
>     assertEquals(sourceNode, nodesStatus.endpointStates.get(0).sourceNode);
> 
>     Map<String, Map<String, List<EndpointState>>> endpoints = nodesStatus.endpointStates.get(0).endpoints;
>     assertEquals(1, endpoints.get("datacenter1").keySet().size());
>     assertEquals(1, endpoints.get("datacenter1").get("rack1").size());
>     assertEquals("NORMAL - DOWN", endpoints.get("datacenter1").get("rack1").get(0).status);
>     assertEquals("NORMAL - UNKNOWN", endpoints.get("datacenter2").get("rack2").get(0).status);
>     assertEquals("NORMAL - UP", endpoints.get("us-west-1").get("rack3").get(0).status);
>     assertEquals(afterSlash(endpoint1), endpoints.get("datacenter1").get("rack1").get(0).endpoint);
>     assertEquals("f091f82b-ce2c-40ee-b30c-6e761e94e821", endpoints.get("datacenter1").get("rack1").get(0).hostId);
252,256c289,294
<     assertEquals(endpoints.get("datacenter1").get("rack1").get(0).releaseVersion, "3.0.8");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).dc, "datacenter2");
<     assertEquals(endpoints.get("datacenter2").get("rack2").get(0).rack, "rack2");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).dc, "us-west-1");
<     assertEquals(endpoints.get("us-west-1").get("rack3").get(0).rack, "rack3");
---
>     assertEquals("3.0.8", endpoints.get("datacenter1").get("rack1").get(0).releaseVersion);
>     assertEquals("datacenter2", endpoints.get("datacenter2").get("rack2").get(0).dc);
>     assertEquals("rack2", endpoints.get("datacenter2").get("rack2").get(0).rack);
>     assertEquals("us-west-1", endpoints.get("us-west-1").get("rack3").get(0).dc);
>     assertEquals("rack3", endpoints.get("us-west-1").get("rack3").get(0).rack);
>     assertEquals(afterSlash(endpoint3), endpoints.get("us-west-1").get("rack3").get(0).endpoint);
259,261c297,299
<     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains("127.0.0.1"));
<     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains("127.0.0.2"));
<     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains("127.0.0.3"));
---
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint1)));
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint2)));
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint3)));
264,265c302,303
<   @Test
<   public void testParseEndpointElassandraStatusString() {
---
>   private void testParseEndpointCassandraStatusString(String sourceNode,
>                                                       String endpoint1, String endpoint2, String endpoint3) {
269c307
<         "/10.0.0.1\n"
---
>         endpoint1 + "\n"
286c324
<             + "/10.0.0.2\n"
---
>             + endpoint2 + "\n"
303c341
<             + "/10.0.0.3\n"
---
>             + endpoint3 + "\n"
321,322c359,360
<     simpleStates.put("/10.0.0.3", "UP");
<     simpleStates.put("/10.0.0.1", "DOWN");
---
>     simpleStates.put(endpoint1, "DOWN");
>     simpleStates.put(endpoint3, "UP");
324c362
<     NodesStatus nodesStatus = new NodesStatus("10.0.0.1", endpointsStatusString, simpleStates);
---
>     NodesStatus nodesStatus = new NodesStatus(sourceNode, endpointsStatusString, simpleStates);
326,327c364,365
<     assertEquals(nodesStatus.endpointStates.size(), 1);
<     assertEquals(nodesStatus.endpointStates.get(0).sourceNode, "10.0.0.1");
---
>     assertEquals(1, nodesStatus.endpointStates.size());
>     assertEquals(sourceNode, nodesStatus.endpointStates.get(0).sourceNode);
336c374
<     assertEquals("10.0.0.1", endpoints.get("us-west-2").get("a").get(0).endpoint);
---
>     assertEquals(afterSlash(endpoint1), endpoints.get("us-west-2").get("a").get(0).endpoint);
347,349c385,399
<     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains("10.0.0.1"));
<     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains("10.0.0.2"));
<     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains("10.0.0.3"));
---
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint1)));
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint2)));
>     assertTrue(nodesStatus.endpointStates.get(0).endpointNames.contains(afterSlash(endpoint3)));
>   }
> 
>   private static String afterSlash(String value) {
>     Preconditions.checkNotNull(value);
>     String[] split = value.split("/");
>     if (split.length == 1) {
>       return value;
>     }
>     if (split.length == 2) {
>       return split[1];
>     }
>     throw new IllegalArgumentException("Too many slashes in " + value);
