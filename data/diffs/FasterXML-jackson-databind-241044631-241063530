Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java after/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
52,75c52,92
<         if (property != null) {
<             JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
<             if (format != null) {
<             	// Simple case first: serialize as numeric timestamp?
<                 JsonFormat.Shape shape = format.getShape();
<                 if (shape.isNumeric()) {
<                     return withFormat(Boolean.TRUE, null);
<                 }
<                 if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
<                                 || format.hasLocale() || format.hasTimeZone()) {
<                     TimeZone tz = format.getTimeZone();
<                     final String pattern = format.hasPattern()
<                                     ? format.getPattern()
<                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
<                     final Locale loc = format.hasLocale()
<                                     ? format.getLocale()
<                                     : serializers.getLocale();
<                     SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
<                     if (tz == null) {
<                         tz = serializers.getTimeZone();
<                     }
<                     df.setTimeZone(tz);
<                     return withFormat(Boolean.FALSE, df);
<                 }
---
>         if (property == null) {
>             return this;
>         }
>         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
>         if (format == null) {
>             return this;
>         }
>         // Simple case first: serialize as numeric timestamp?
>         JsonFormat.Shape shape = format.getShape();
>         if (shape.isNumeric()) {
>             return withFormat(Boolean.TRUE, null);
>         }
> 
>         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
>         // First: custom pattern will override things
>         if (format.hasPattern()) {
>             final Locale loc = format.hasLocale()
>                             ? format.getLocale()
>                             : serializers.getLocale();
>             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
>             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
>                     : serializers.getTimeZone();
>             df.setTimeZone(tz);
>             return withFormat(Boolean.FALSE, df);
>         }
> 
>         // Otherwise, need one of these changes:
>         final boolean hasLocale = format.hasLocale();
>         final boolean hasTZ = format.hasTimeZone();
>         final boolean asString = (shape == JsonFormat.Shape.STRING);
> 
>         if (!hasLocale && !hasTZ && !asString) {
>             return this;
>         }
> 
>         DateFormat df0 = serializers.getConfig().getDateFormat();
>         // Jackson's own `StdDateFormat` is quite easy to deal with...
>         if (df0 instanceof StdDateFormat) {
>             StdDateFormat std = (StdDateFormat) df0;
>             if (format.hasLocale()) {
>                 std = std.withLocale(format.getLocale());
76a94,119
>             if (format.hasTimeZone()) {
>                 std = std.withTimeZone(format.getTimeZone());
>             }
>             return withFormat(Boolean.FALSE, std);
>         }
> 
>         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
>         //    mechanism for changing `DateFormat` instances (or even clone()ing)
>         //    So: require it be `SimpleDateFormat`; can't config other types
>         if (!(df0 instanceof SimpleDateFormat)) {
> //            serializers.reportBadDefinition(handledType(), String.format(
>             serializers.reportMappingProblem(
> "Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",
> df0.getClass().getName());
>         }
>         SimpleDateFormat df = (SimpleDateFormat) df0;
>         if (hasLocale) {
>             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
>             df = new SimpleDateFormat(df.toPattern(), format.getLocale());
>         } else {
>             df = (SimpleDateFormat) df.clone();
>         }
>         TimeZone newTz = format.getTimeZone();
>         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
>         if (changeTZ) {
>             df.setTimeZone(newTz);
78c121
<         return this;
---
>         return withFormat(Boolean.FALSE, df);
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java after/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java
309d308
< }
310a310,318
>     // [databind#1648]: contextual default format should be used
>     public void testFormatWithoutPattern() throws Exception
>     {
>         ObjectMapper mapper = new ObjectMapper();
>         mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd'X'HH:mm:ss"));
>         String json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));
>         assertEquals(aposToQuotes("{'date':'1970-01-01X01:00:00'}"), json);
>     }
> }
