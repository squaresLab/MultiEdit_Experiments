Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java after/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java
58,69c58
< 	private static final int ARG_CACHE_SIZE = 100;
< 
< 	private static final ThreadLocal<Object[][]> OBJECT_POOL = ThreadLocal.withInitial(() -> {
< 
< 		Object[][] cached = new Object[ARG_CACHE_SIZE][];
< 
< 		for (int i = 0; i < ARG_CACHE_SIZE; i++) {
< 			cached[i] = new Object[i];
< 		}
< 
< 		return cached;
< 	});
---
> 	private static final Object[] EMPTY_ARGS = new Object[0];
173c162
< 	 * Allocates an object array for instance creation. This method uses the argument array cache if possible.
---
> 	 * Allocates an object array for instance creation.
178d166
< 	 * @see #ARG_CACHE_SIZE
181,196c169
< 		return argumentCount < ARG_CACHE_SIZE ? OBJECT_POOL.get()[argumentCount] : new Object[argumentCount];
< 	}
< 
< 	/**
< 	 * Deallocates an object array used for instance creation. Parameters are cleared if the array was cached.
< 	 *
< 	 * @param argumentCount
< 	 * @return
< 	 * @since 2.0
< 	 * @see #ARG_CACHE_SIZE
< 	 */
< 	static void deallocateArguments(Object[] params) {
< 
< 		if (params.length != 0 && params.length < ARG_CACHE_SIZE) {
< 			Arrays.fill(params, null);
< 		}
---
> 		return argumentCount == 0 ? EMPTY_ARGS : new Object[argumentCount];
253,254d225
< 			} finally {
< 				deallocateArguments(params);
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java after/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java
240,244c240
< 			try {
< 				return (T) instantiator.newInstance(params);
< 			} finally {
< 				deallocateArguments(params);
< 			}
---
> 			return (T) instantiator.newInstance(params);
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/org/springframework/data/convert/ReflectionEntityInstantiator.java after/src/main/java/org/springframework/data/convert/ReflectionEntityInstantiator.java
43,54c43
< 	private final int ARG_CACHE_SIZE = 100;
< 
< 	private final ThreadLocal<Object[][]> objectPool = ThreadLocal.withInitial(() -> {
< 
< 		Object[][] cached = new Object[ARG_CACHE_SIZE][];
< 
< 		for (int i = 0; i < ARG_CACHE_SIZE; i++) {
< 			cached[i] = new Object[i];
< 		}
< 
< 		return cached;
< 	});
---
> 	private static final Object[] EMPTY_ARGS = new Object[0];
83c72
< 		Object[] params = parameterCount < ARG_CACHE_SIZE ? objectPool.get()[parameterCount] : new Object[parameterCount];
---
> 		Object[] params = parameterCount == 0 ? EMPTY_ARGS : new Object[parameterCount];
93,94d81
< 		} finally {
< 			Arrays.fill(params, null);
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/org/springframework/data/convert/ClassGeneratingEntityInstantiatorUnitTests.java after/src/test/java/org/springframework/data/convert/ClassGeneratingEntityInstantiatorUnitTests.java
149a150,183
> 	@Test // DATACMNS-1175
> 	@SuppressWarnings({ "unchecked", "rawtypes" })
> 	public void createsInstancesWithRecursionAndSameCtorArgCountCorrectly() {
> 
> 		PersistentEntity<SampleWithReference, P> outer = new BasicPersistentEntity<>(from(SampleWithReference.class));
> 		PersistentEntity<Sample, P> inner = new BasicPersistentEntity<>(from(Sample.class));
> 
> 		doReturn(2L, "FOO").when(provider).getParameterValue(any(Parameter.class));
> 
> 		ParameterValueProvider<P> recursive = new ParameterValueProvider<P>() {
> 
> 			@Override
> 			public <T> T getParameterValue(Parameter<T, P> parameter) {
> 
> 				if (parameter.getName().equals("id")) {
> 					return (T) Long.valueOf(1);
> 				}
> 
> 				if (parameter.getName().equals("sample")) {
> 					return (T) instance.createInstance(inner, provider);
> 				}
> 
> 				throw new UnsupportedOperationException(parameter.getName());
> 			}
> 		};
> 
> 		SampleWithReference reference = this.instance.createInstance(outer, recursive);
> 
> 		assertThat(reference.id).isEqualTo(1L);
> 		assertThat(reference.sample).isNotNull();
> 		assertThat(reference.sample.id).isEqualTo(2L);
> 		assertThat(reference.sample.name).isEqualTo("FOO");
> 	}
> 
157c191,192
< 		IntStream.range(0, 2).forEach(i -> assertThat(this.instance.createInstance(entity, provider)).isInstanceOf(ObjCtorDefault.class));
---
> 		IntStream.range(0, 2)
> 				.forEach(i -> assertThat(this.instance.createInstance(entity, provider)).isInstanceOf(ObjCtorDefault.class));
282a318,329
> 		}
> 	}
> 
> 	static class SampleWithReference {
> 
> 		final Long id;
> 		final Sample sample;
> 
> 		public SampleWithReference(Long id, Sample sample) {
> 
> 			this.id = id;
> 			this.sample = sample;
