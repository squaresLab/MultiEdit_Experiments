Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java after/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
955c955,957
<         if (input.containsKey(null)) {
---
>         // [databind#153]: but, apparently, some custom Maps do manage hit this
>         //   problem.
>         if (_hasNullKey(input)) {
969a972,987
>     /**
>      * @since 2.8.7
>      */
>     protected boolean _hasNullKey(Map<?,?> input) {
>         // 19-Feb-2017, tatu: As per [databind#1513] there are many cases where `null`
>         //   keys are not allowed, and even attempt to check for presence can cause
>         //   problems. Without resorting to external sorting (and internal API change),
>         //   or custom sortable Map implementation (more code) we can try black- or
>         //   white-listing (that is; either skip known problem cases; or only apply for
>         //   known good cases).
>         //   While my first instinct was to do black-listing (remove Hashtable and ConcurrentHashMap),
>         //   all in all it is probably better to just white list `HashMap` (and its sub-classes).
>         
>         return (input instanceof HashMap) && input.containsKey(null);
>     }
>     
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java after/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java
290c290
<     public void testConcurrentSkipListMap() throws Exception
---
>     public void testConcurrentMaps() throws Exception
291a292,293
>         final ObjectWriter w = MAPPER.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);
> 
292a295,301
>         input.put("x", "y");
>         input.put("a", "b");
>         String json = w.writeValueAsString(input);
>         assertEquals(aposToQuotes("{'a':'b','x':'y'}"), json);
> 
>         input = new ConcurrentHashMap<String,String>();
>         input.put("x", "y");
293a303,307
>         json = w.writeValueAsString(input);
>         assertEquals(aposToQuotes("{'a':'b','x':'y'}"), json);
> 
>         // One more: while not technically concurrent map at all, exhibits same issue
>         input = new Hashtable<String,String>();
295,297c309,310
<         String json = MAPPER
<                 .writer().with(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)
<                 .writeValueAsString(input);
---
>         input.put("a", "b");
>         json = w.writeValueAsString(input);
