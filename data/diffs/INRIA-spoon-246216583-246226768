Only in after/: bears.json
Only in after/: classpath.info
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/main/java/spoon/support/compiler/jdt/JDTTreeBuilder.java after/src/main/java/spoon/support/compiler/jdt/JDTTreeBuilder.java
155a156
> import spoon.reflect.reference.CtReference;
1418c1419,1427
< 			context.enter(references.<Throwable>getTypeReference(singleTypeReference.resolvedType), singleTypeReference);
---
> 			if (singleTypeReference.resolvedType == null) {
> 				CtTypeReference typeReference = factory.Type().createReference(singleTypeReference.toString());
> 				CtReference ref = references.getDeclaringReferenceFromImports(singleTypeReference.getLastToken());
> 				references.setPackageOrDeclaringType(typeReference, ref);
> 				context.enter(typeReference, singleTypeReference);
> 			} else {
> 				context.enter(references.<Throwable>getTypeReference(singleTypeReference.resolvedType), singleTypeReference);
> 			}
> 
diff -r -x '*.log' -x '*.config' -x '*git*' -x '*.md' -x '*.xml' before/src/test/java/spoon/test/exceptions/ExceptionTest.java after/src/test/java/spoon/test/exceptions/ExceptionTest.java
8a9,10
> import spoon.reflect.code.CtCatch;
> import spoon.reflect.code.CtCatchVariable;
9a12
> import spoon.reflect.visitor.filter.TypeFilter;
11a15
> import java.util.List;
12a17,18
> import static org.junit.Assert.assertEquals;
> import static org.junit.Assert.assertNotNull;
101a108,129
> 	}
> 
> 	@Test
> 	public void testUnionCatchExceptionInsideLambdaInNoClasspath() {
> 		// contract: the model should be built when defining a union catch inside a lambda which is not known (noclasspath)
> 		// and the catch variable types should be the same than outside a lambda
> 		Launcher launcher = new Launcher();
> 		launcher.addInputResource("./src/test/resources/noclasspath/UnionCatch.java");
> 		launcher.getEnvironment().setNoClasspath(true);
> 		launcher.buildModel();
> 
> 		List<CtCatch> catches = launcher.getFactory().getModel().getElements(new TypeFilter<>(CtCatch.class));
> 		assertEquals(2, catches.size());
> 
> 		CtCatchVariable variable1 = catches.get(0).getParameter(); // inside a lambda
> 		CtCatchVariable variable2 = catches.get(1).getParameter(); // outside the lambda
> 
> 		assertEquals(variable1.getMultiTypes(), variable2.getMultiTypes());
> 
> 		// for now the type of CtCatchVariable is not the same
> 		// this should be fix in the future (see: https://github.com/INRIA/spoon/issues/1420)
> 		//assertEquals(variable2, variable1);
