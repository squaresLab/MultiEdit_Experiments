diff -r -x '*.config' -x '*git*' -x '*.md' -x '*.xml' d4j_buggy/Closure173/src/com/google/javascript/jscomp/CodeGenerator.java d4j_patched/Closure173/src/com/google/javascript/jscomp/CodeGenerator.java
130,135c130
<       if (last.getType() == type &&
<           NodeUtil.isAssociative(type)) {
<         addExpr(first, p, context);
<         cc.addOp(opstr, true);
<         addExpr(last, p, rhsContext);
<       } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
---
>       if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
diff -r -x '*.config' -x '*git*' -x '*.md' -x '*.xml' d4j_buggy/Closure173/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java d4j_patched/Closure173/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
101a102,108
>       case Token.MUL:
>       case Token.AND:
>       case Token.OR:
>       case Token.BITOR:
>       case Token.BITXOR:
>       case Token.BITAND:
>         return tryRotateAssociativeOperator(node);
107a115,135
>   private Node tryRotateAssociativeOperator(Node n) {
>     if (!late) {
>       return n;
>     }
>     Preconditions.checkArgument(NodeUtil.isAssociative(n.getType()));
>     Node rhs = n.getLastChild();
>     if (n.getType() == rhs.getType()) {
>       Node parent = n.getParent();
>       Node first = n.getFirstChild().detachFromParent();
>       Node second = rhs.getFirstChild().detachFromParent();
>       Node third = rhs.getLastChild().detachFromParent();
>       Node newLhs = new Node(n.getType(), first, second)
>           .copyInformationFrom(n);
>       Node newRoot = new Node(rhs.getType(), newLhs, third)
>           .copyInformationFrom(rhs);
>       parent.replaceChild(n, newRoot);
>       reportCodeChange();
>       return newRoot;
>     }
>     return n;
>   }
