@article{convcodeclone
  title={Comparison and evaluation of code clone detection techniques and tools: A qualitative approach}
  author={Roy, Chanchal K. and Cordy, James R. and Koschke, Rainer}
  journal={Science of Computer Programming}
  volume={74}
  number={7}
  pages={470--495}
  year={2009}
}

@inproceedings{capgen,
  title={Context-aware patch generation for better automated program repair},
  author={Wen, Ming and Chen, Junjie and Wu, Rongxin and Hao, Dan and Cheung, Shing-Chi},
  booktitle={2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE)},
  pages={1--11},
  year={2018},
  organization={IEEE}
}

@article{arja-journal,
  title={Toward Better Evolutionary Program Repair: An Integrated Approach},
  author={Yuan, Yuan and Banzhaf, Wolfgang},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={29},
  number={1},
  pages={1--53},
  year={2020},
  publisher={ACM New York, NY, USA}
}

@inproceedings{prapr,
  title={PraPR: practical program repair via bytecode mutation},
  author={Ghanbari, Ali and Zhang, Lingming},
  booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={1118--1121},
  year={2019},
  organization={IEEE}
}

@inproceedings{astor,
  title={Astor: Exploring the design space of generate-and-validate program repair beyond {GenProg}},
  author={Martinez, Matias and Monperrus, Martin},
  journal={Journal of Systems and Software},
  volume={151},
  pages={65--80},
  year={2019},
  publisher={Elsevier}
}

@article{sosrepair,
  title={SOSRepair: Expressive Semantic Search for Real-World Program Repair},
  author={Afzal, Afsoon and Motwani, Manish and Stolee, Kathryn and Brun, Yuriy and Le Goues, Claire},
  journal={IEEE Transactions on Software Engineering},
  year={2019},
  publisher={IEEE}
}

@article{confix,
  title={Automatic patch generation with context-based change application},
  author={Kim, Jindae and Kim, Sunghun},
  journal={Empirical Software Engineering},
  volume={24},
  number={6},
  pages={4071--4106},
  year={2019},
  publisher={Springer}
}

@inbook{iceland,
author = {Haraldsson, Saemundur O. and Woodward, John R. and Brownlee, Alexander E. I. and Siggeirsdottir, Kristin},
title = {Fixing Bugs in Your Sleep: How Genetic Improvement Became an Overnight Success},
year = {2017},
isbn = {9781450349390},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3067695.3082517},
booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference Companion},
pages = {1513--1520},
numpages = {8}
}

@inproceedings{vanTonderHeapProperties2018,
  title = {{Static Automated Program Repair for Heap Properties}},
  author = {{van~Tonder}, Rijnard and {Le~Goues}, Claire},
  booktitle = {International Conference on Software Engineering},
  series = {ICSE '18},
  pages = {151--162},
  month = may,
  year = {2018},
  publisher = {ACM},
  location = {Gothenburg, Sweden},
  doi = {10.1145/3180155.3180250},
  month_numeric = {5}
}

@phdthesis{chris-thesis,
  title={Advanced Techniques for Search-Based Program Repair},
  school={University of York},
  author={C. S. Timperley},
  year={2017},
  month={June}
}

@inproceedings{gi2019,
  author = {Ding, Zhen Yu and Lyu, Yiwei and Timperley, Christopher S. and Goues, Claire Le},
  title = {Leveraging Program Invariants to Promote Population Diversity in Search-Based Automatic Program Repair},
  year = {2019},
  publisher = {IEEE Press},
  url = {https://doi.org/10.1109/GI.2019.00011},
  doi = {10.1109/GI.2019.00011},
  booktitle = {Proceedings of the 6th International Workshop on Genetic Improvement},
  pages = {2–9},
  numpages = {8},
  keywords = {fitness function, automated program repair, program semantics, invariant analysis, genetic programming},
  location = {Montreal, Quebec, Canada},
  series = {GI ’19}
}

@techreport{Miller96,
  author = {B. L. Miller and D. E. Goldberg},
  title = {Optimal Sampling for Genetic Algorithms},
  month = {August},
  year = {1996},
  institution = {{University of Illinois at Urbana-Champaign}}
}

@Article{Koza1994,
  author="Koza, J. R.",
  title="Genetic programming as a means for programming computers by natural selection",
  journal="Statistics and Computing",
  year="1994",
  month="Jun",
  day="01",
  volume="4",
  number="2",
  pages="87--112",
  abstract="Many seemingly different problems in machine learning, artificial intelligence, and symbolic processing can be viewed as requiring the discovery of a computer program that produces some desired output for particular inputs. When viewed in this way, the process of solving these problems becomes equivalent to searching a space of possible computer programs for a highly fit individual computer program. The recently developed genetic programming paradigm described herein provides a way to search the space of possible computer programs for a highly fit individual computer program to solve (or approximately solve) a surprising variety of different problems from different fields. In genetic programming, populations of computer programs are genetically bred using the Darwinian principle of survival of the fittest and using a genetic crossover (sexual recombination) operator appropriate for genetically mating computer programs. Genetic programming is illustrated via an example of machine learning of the Boolean 11-multiplexer function and symbolic regression of the econometric exchange equation from noisy empirical data.",
  issn="1573-1375"
}

@MISC{cambridge-study,
  title={Cambridge University Study States Software Bugs Cost Economy {\$}312 Billion Per Year},
  howpublished={\url{http://www.prweb.com/releases/2013/1/prweb10298185.htm}},
  note={{Accessed December, 2018}}
}

@inproceedings{sapfix,
author = {Marginean, A. and Bader, J. and Chandra, S. and Harman, M. and Jia, Y. and Mao, K. and Mols, A. and Scott, A.},
title = { {SapFix}: {A}utomated End-to-End Repair at Scale},
booktitle = {International Conference on Software Engineering (SEIP track) },
series = {ICSE-SEIP '19},
year = {2019},
pages = {(to appear)}
}

@inproceedings{diversity-metrics-review,
 author = {Burke, E. and Gustafson, S. and Kendall, G.},
 title = {A Survey and Analysis of Diversity Measures in Genetic Programming},
 booktitle = {Genetic and Evolutionary Computation Conference},
 series = {GECCO'02},
 year = {2002},
 pages = {716--723},
 numpages = {8}
}

@INPROCEEDINGS{phenotypic-diversity,
  author={P. D'haeseleer},
  booktitle={Conference on Evolutionary Computation. World Congress on Computational Intelligence},
  title={Context preserving crossover in genetic programming},
  year={1994},
  volume={1},
  number={},
  pages={256--261}
}

@article{mannwhitneyu,
  author = "Mann, H. B. and Whitney, D. R.",
  fjournal = "The Annals of Mathematical Statistics",
  journal = "The Annals of Mathematical Statistics",
  number = "1",
  pages = "50--60",
  publisher = "The Institute of Mathematical Statistics",
  title = {On a Test of Whether one of Two Random Variables is Stochastically Larger than the Other},
  volume = "18",
  year = "1947"
}

@MISC{tricentis,
	title={Software Fail Watch: 5th Edition},
	howpublished={\url{https://www.tricentis.com/software-fail-watch/}},
	note={{Accessed December, 2018}}
}

@article{vargha-delaney,
	author = {András Vargha and Harold D. Delaney},
	title = {{A Critique and Improvement of the CL Common Language Effect Size Statistics of McGraw and Wong}},
	journal = {{Journal of Educational and Behavioral Statistics}},
	volume = {25},
	number = {2},
	pages = {101-132},
	year = {2000},
	doi = {10.3102/10769986025002101}

}

@techreport{hybridmuse,
	author = {Seokhyeon Moon and Yunho Kim and Moonzoo Kim and Shin Yoo},
	title = {{Hybrid-MUSE: Mutating Faulty Programs for Precise Fault Localization}},
	year = 2014,
	institution = {KAIST}
}

@ARTICLE{arcuri,
  title     = {{Evolutionary Repair of Faulty Software}},
  author    = "Arcuri, Andrea",
  journal   = "Applied Soft Computing",
  volume    =  11,
  number    =  4,
  pages     = "3494--3514",
  year      =  2011,
  keywords  = "Automated debugging, Coevolution, Fault localization, Genetic
               programming, Repair, Search Based Software Engineering"
}

@INPROCEEDINGS{genprog-operators,
  title     = {{Representations and Operators for Improving Evolutionary
               Software Repair}},
  booktitle = "Genetic and Evolutionary Computation Conference",
 
  author    = "Le~Goues, Claire and Weimer, Westley and Forrest, Stephanie",
  pages     = "959--966",
  series    = "GECCO '12",
  year      =  2012,
  keywords  = "crossover, genetic programming, mutation, representation,
               search-based software engineering, software repair"
}

@INPROCEEDINGS{patch-correctness,
  title     = {An Analysis of Patch Plausibility and Correctness for
               Generate-and-validate Patch Generation Systems},
  booktitle = "International Symposium on Software
               Testing and Analysis",
  author    = "Qi, Z. and Long, F. and Achour, S. and Rinard, M.",
  pages     = "24--36",
  series    = "ISSTA '15",
  year      =  2015,
  keywords  = "Automatic Repair, Function Elimination, Patch Analysis"
}

@ARTICLE{sir,
  title     = {{Supporting Controlled Experimentation with Testing Techniques:
               An Infrastructure and its Potential Impact}},
  author    = "Do, Hyunsook and Elbaum, Sebastian and Rothermel, Gregg",
  abstract  = "Where the creation, understanding, and assessment of software
               testing and regression testing techniques are concerned,
               controlled experimentation is an indispensable research
               methodology. Obtaining the infrastructure necessary to support
               such experimentation, however, is difficult and expensive. As a
               result, progress in experimentation with testing techniques has
               been slow, and empirical data on the costs and effectiveness of
               techniques remains relatively scarce. To help address this
               problem, we have been designing and constructing infrastructure
               to support controlled experimentation with testing and
               regression testing techniques. This paper reports on the
               challenges faced by researchers experimenting with testing
               techniques, including those that inform the design of our
               infrastructure. The paper then describes the infrastructure that
               we are creating in response to these challenges, and that we are
               now making available to other researchers, and discusses the
               impact that this infrastructure has had and can be expected to
               have.",
  journal   = "Empirical Software Engineering",
  volume    =  10,
  number    =  4,
  pages     = "405--435",
  year      =  2005,
  language  = "en"
}

@ARTICLE{manybugs,
  title    = {The {ManyBugs} and {IntroClass} Benchmarks for Automated Repair
              of {C} Programs},
  author   = "Le~Goues, C. and Holtschulte, N. and Smith, E. K. and Brun, Y. and
              Devanbu, P. and Forrest, S. and Weimer, W.",
  abstract = "The field of automated software repair lacks a set of common
              benchmark problems. Although benchmark sets are used widely
              throughout computer science, existing benchmarks are not easily
              adapted to the problem of automatic defect repair, which has
              several special requirements. Most important of these is the need
              for benchmark programs with reproducible, important defects and a
              deterministic method for assessing if those defects have been
              repaired. This article details the need for a new set of
              benchmarks, outlines requirements, and then presents two
              datasets, ManyBugs and IntroClass, consisting between them of
              1,183 defects in 15 C programs. Each dataset is designed to
              support the comparative evaluation of automatic repair algorithms
              asking a variety of experimental questions. The datasets have
              empirically defined guarantees of reproducibility and benchmark
              quality, and each study object is categorized to facilitate
              qualitative evaluation and comparisons by category of bug or
              program. The article presents baseline experimental results on
              both datasets for three existing repair methods, GenProg, AE, and
              TrpAutoRepair, to reduce the burden on researchers who adopt
              these datasets for their own comparative evaluations.",
  journal  = "IEEE Trans. Software Eng.",
  volume   =  41,
  number   =  12,
  pages    = "1236--1256",
  year     =  2015,
  keywords = "C language;benchmark testing;program debugging;software
              maintenance;software performance evaluation;software quality;C
              programs;GenProg;IntroClass benchmarks;ManyBugs
              benchmarks;TrpAutoRepair;automated software repair;automatic
              defect repair;automatic repair algorithms;benchmark
              problems;benchmark programs;benchmark quality;benchmark
              sets;computer science;defects assessment;deterministic
              method;qualitative evaluation;reproducibility;Benchmark
              testing;Computer bugs;Electronic mail;Maintenance
              engineering;Software systems;Automated program
              repair;INTROCLASS;IntroClass;MANYBUGS;ManyBugs;benchmark;reproducibility;subject
              defect"
}

@ARTICLE{schulte,
  title     = {{Software mutational robustness}},
  author    = "Schulte, Eric and Fry, Zachary P and Fast, Ethan and Weimer,
               Westley and Forrest, Stephanie",
  abstract  = "Neutral landscapes and mutational robustness are believed to be
               important enablers of evolvability in biology. We apply these
               concepts to software, defining mutational robustness to be the
               fraction of",
  journal   = "Genetic Programming and Evolvable Machines",
  volume    =  15,
  number    =  3,
  pages     = "281--312",
  year      =  2013,
  language  = "en"
}

@inproceedings{Perkins09,
   author = {Perkins, J. H. and Kim, S. and Larsen, S. and
	Amarasinghe, S. and Bachrach, J. and Carbin, M. and
	Pacheco, C. and Sherwood, F. and Sidiroglou, S. and
	Sullivan, G. and Wong, W. and Zibin, Y. and Ernst, M. D. and
	Rinard, M.},
   title = {Automatically patching errors in deployed software},
   booktitle = {Symposium on Operating Systems Principles},
   booktitle = {SOSP '09},
   pages = {87--102},
   year = {2009}
}

@INPROCEEDINGS{muse,
  title     = {{Ask the Mutants: Mutating Faulty Programs for Fault Localization}},
  booktitle = "International Conference on Software
               Testing, Verification and Validation",
	series = "ICST '14",
  author    = "Moon, S and Kim, Y and Kim, M and Yoo, S",
  abstract  = "We present MUSE (MUtation-baSEd fault localization technique), a
               new fault localization technique based on mutation analysis. A
               key idea of MUSE is to identify a faulty statement by utilizing
               different characteristics of two groups of mutants-one that
               mutates a faulty statement and the other that mutates a correct
               statement. We also propose a new evaluation metric for fault
               localization techniques based on information theory, called
               Locality Information Loss (LIL): it can measure the aptitude of
               a localization technique for automated fault repair systems as
               well as human debuggers. The empirical evaluation using 14
               faulty versions of the five real-world programs shows that MUSE
               localizes a fault after reviewing 7.4 statements on average,
               which is about 25 times more precise than the state-of-the-art
               SBFL technique Op2.",
  pages     = "153--162",
  year      =  2014
}


@INPROCEEDINGS{par,
  title     = {{Automatic Patch Generation Learned from Human-written Patches}},
  booktitle = "International Conference on Software Engineering",
  author    = "Kim, Dongsun and Nam, Jaechang and Song, Jaewoo and Kim, Sunghun",
  pages     = "802--811",
  series    = "ICSE '13",
  year      =  2013,
}


@INPROCEEDINGS{spr,
  title     = {{Staged program repair with condition synthesis}},
  booktitle = "Joint Meeting on Foundations of Software Engineering",
  author    = "Long, F. and Rinard, M.",
	series = "ESEC/FSE '15",
  pages     = "166--178",
  year      =  2015,
  keywords  = "Condition synthesis; Program repair; Staged repair"
}

@article{genprog,
author = {Le~Goues, C. and Nguyen, T. and Forrest, S. and Weimer, W.},
title = {Gen{P}rog: A Generic Method for Automatic Software Repair},
journal ={IEEE Trans. Software Eng.},
volume = {38},
issn = {0098-5589},
year = {2012},
pages = {54-72}
}

@InProceedings{harrold05tarantula,
	isbn={1-59593-993-4},
	title={Empirical evaluation of the {Tarantula} automatic fault-localization technique},
	booktitle={Automated Software Engineering },
	author={Jones, James A. and Harrold, Mary Jean},
	year={2005},
	pages={273--282},
}

@ARTICLE{mbfl-survey,
  title         = {{Assessing and Comparing Mutation-based Fault Localization
                   Techniques}},
  author        = "Chekam, Thierry Titcheu and Papadakis, Mike and Le Traon,
                   Yves",
  abstract      = "Recent research demonstrated that mutation-based fault
                   localization techniques are relatively accurate and
                   practical. However, these methods have never been compared
                   and have only been assessed with simple hand-seeded faults.
                   Therefore, their actual practicality is questionable when it
                   comes to real-wold faults. To deal with this limitation we
                   asses and compare the two main mutation-based fault
                   localization methods, named Metallaxis and MUSE, on a set of
                   real-world programs and faults. Our results based on three
                   typical evaluation metrics indicate that mutation-based
                   fault localization methods are relatively accurate and
                   provide relevant information to developers. Overall, our
                   result indicate that Metallaxis and MUSE require 18\% and
                   37\% of the program statements to find the sought faults.
                   Additionally, both methods locate 50\% and 80\% of the
                   studied faults when developers inspect 10 and 25 statements.",
  year          =  2016,
  archivePrefix = "arXiv",
  primaryClass  = "cs.SE",
  eprint        = "1607.05512"
}

@inproceedings{plastic,
author = {Barr, Earl T. and Brun, Yuriy and Devanbu, Premkumar and Harman, Mark and Sarro, Federica},
title = {The Plastic Surgery Hypothesis},
year = {2014},
isbn = {9781450330565},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2635868.2635898},
doi = {10.1145/2635868.2635898},
booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {306–317},
numpages = {12},
keywords = {automated program repair, code reuse, Software graftability, empirical software engineering, mining software repositories},
location = {Hong Kong, China},
series = {FSE 2014}
}

@ARTICLE{metallaxis,
  title    = {{Metallaxis-FL}: mutation-based fault localization},
  author   = "Papadakis, Mike and Le Traon, Yves",
  abstract = "Fault localization methods seek to identify faulty program
              statements based on the information provided by the failing and
              passing test executions. Spectrum-based methods are among the
              most popular ones and assist programmers by assigning
              suspiciousness values on program statements according to their
              probability of being faulty. This paper proposes Metallaxis, a
              fault localization approach based on mutation analysis. The
              innovative part of Metallaxis is that it uses mutants and links
              them with the faulty program places. Thus, mutants that are
              killed mostly by failing tests provide a good indication about
              the location of a fault. Experimentation using Metallaxis
              suggests that it is significantly more effective than
              statement-based approaches. This is true even in the case where
              mutation cost-reduction techniques, such as mutant sampling, are
              facilitated. Additionally, results from a controlled experiment
              show that the use of mutation as a testing technique provides
              benefits to the fault localization process. Therefore, fault
              localization is significantly improved by using mutation-based
              tests instead of block-based or branch-based test suites.
              Finally, evidence in support of the methods’ scalability is also
              given. Copyright \copyright{} 2013 John Wiley \& Sons, Ltd.",
  journal  = "Software Testing, Verification and Reliability",
  volume   =  25,
  number   = "5-7",
  pages    = "605--628",
  year     =  2015,
  keywords = "debugging; mutation analysis; fault localization"
}

@INPROCEEDINGS{qi-sbfl,
  title     = {{Using Automated Program Repair for Evaluating the Effectiveness
               of Fault Localization Techniques}},
  booktitle = "International Symposium on Software
               Testing and Analysis",
  author    = "Qi, Yuhua and Mao, Xiaoguang and Lei, Yan and Wang, Chengsong",
  pages     = "191--201",
  series    = "ISSTA '13",
  year      =  2013,
  keywords  = "Fault localization, automated debugging, automated program
               repair"
}

@inproceedings{sbfl,
	author="Yoo, Shin",
	editor="Fraser, Gordon
	and Teixeira de Souza, Jerffeson",
	title="Evolving Human Competitive Spectra-Based Fault Localisation Techniques",
	bookTitle="Search Based Software Engineering",
	series = "SSBSE '12",
	year="2012",
	pages="244--258",
	isbn="978-3-642-33119-0",
	doi="10.1007/978-3-642-33119-0_18"
}

@ARTICLE{delta-debugging,
  title    = {{Simplifying and isolating failure-inducing input}},
  author   = "Zeller, A and Hildebrandt, R",
  abstract = "Given some test case, a program fails. Which circumstances of the
              test case are responsible for the particular failure? The delta
              debugging algorithm generalizes and simplifies the failing test
              case to a minimal test case that still produces the failure. It
              also isolates the difference between a passing and a failing test
              case. In a case study, the Mozilla Web browser crashed after 95
              user actions. Our prototype implementation automatically
              simplified the input to three relevant user actions. Likewise, it
              simplified 896 lines of HTML to the single line that caused the
              failure. The case study required 139 automated test runs or 35
              minutes on a 500 MHz PC",
  journal  = "IEEE Trans. Software Eng.",
  volume   =  28,
  number   =  2,
  pages    = "183--200",
  year     =  2002,
  keywords = "online front-ends;program debugging;program testing;500
              MHz;HTML;Mozilla web browser;delta debugging
              algorithm;failure-inducing input;test case;user actions;Automatic
              testing;Computer Society;Computer bugs;Computer
              crashes;Databases;Debugging;HTML;Prototypes;Turning;Vehicle crash
              testing"
}

@INPROCEEDINGS{slicing,
  title     = {{Program Slicing}},
  booktitle = "International Conference on Software Engineering",
  series    = {ICSE '81},
  author    = "Weiser, Mark",
  pages     = "439--449",
  year      =  1981,
  keywords  = "Data flow analysis, Debugging, Human factors, Program
               maintenance, Program metrics, Software tools"
}

@INPROCEEDINGS{monperrus-argument,
  title     = {{A critical review of automatic patch generation learned from
               human-written patches: essay on the problem statement and the
               evaluation of automatic software repair}},
  booktitle = "International Conference on Software Engineering",
	series = "ICSE '14",
  author    = "Monperrus, Martin",
  pages     = "234--242",
  year      =  2014,
  keywords  = "Bugs; automatic patch generation; automatic program fixing;
               automatic software repair; error recovery; faults"
}

@INPROCEEDINGS{anti-patterns,
  title       = {{Anti-patterns in {Search-Based} Program Repair}},
  author      = "Tan, Shin Hwei and Yoshida, Hiroaki and Prasad, Mukul R and
                 Roychoudhury, Abhik",
  institution = "FSE",
  year        =  2016
}

@INPROCEEDINGS{better-fitness,
  title     = {Designing Better Fitness Functions for Automated Program Repair},
  booktitle = "Genetic and Evolutionary Computation Conference",
  author    = "Fast, E. and Le~Goues, C. and Forrest, S. and
               Weimer, W.",
  pages     = "965--972",
  series    = "GECCO '10",
  year      =  2010,
  keywords  = "genetic programming, software engineering, software repair"
}

@INPROCEEDINGS{trp,
  title     = {{Efficient Automated Program Repair through {Fault-Recorded}
               Testing Prioritization}},
  booktitle = "International Conference on Software Maintenance",
  author    = "Qi, Y and Mao, X and Lei, Y",
  abstract  = "Most techniques for automated program repair use test cases to
               validate the effectiveness of the produced patches. The
               validation process can be time-consuming especially when the
               object programs ship with either lots of test cases or some
               long-running test cases. To alleviate the cost for testing, we
               first introduce regression test prioritization insight into the
               area of automated program repair, and present a novel
               prioritization technique called FRTP with the goal of reducing
               the number of test case executions in the repair process. Unlike
               most existing prioritization techniques frequently requiring
               additional cost for gathering previous test executions
               information, FRTP iteratively extracts that information just
               from the repair process, and thus incurs trivial performance
               lose. We also built a tool called TrpAutoRepair, which
               implements our FRTP technique and has the ability of
               automatically repairing C programs. To evaluate TrpAutoRepair,
               we compared it with GenProg, a state-of-the-art tool for
               automated C program repair. The experiment on the 5 subject
               programs with 16 real-life bugs provides evidence that
               TrpAutoRepair performs at least as good as GenProg in term of
               success rate, in most cases (15/16), TrpAutoRepair can
               significantly improve the repair efficiency by reducing
               efficiently the test case executions when searching a valid
               patch in the repair process.",
  pages     = "180--189",
  year      =  2013,
  keywords  = "program debugging;program testing;regression
               analysis;statistical testing;FRTP
               technique;GenProg;TrpAutoRepair;automated debugging;automated
               program repair;fault-recorded testing prioritization;regression
               test prioritization;test case prioritization;Computer
               bugs;Context;Data mining;Fault detection;Indexes;Maintenance
               engineering;Testing;automated debugging;automated program
               repair;efficiency;test case prioritization"
}

@INPROCEEDINGS{rsrepair,
  title     = {The Strength of Random Search on Automated Program Repair},
  booktitle = "International Conference on Software Engineering",
  author    = "Qi, Y. and Mao, X. and Lei, Y. and Dai, Z. and
               Wang, C.",
  pages     = "254--265",
  series    = "ICSE '14",
  year      =  2014,
  keywords  = "Automated program repair, genetic programming, random search,
               search-based software engineering"
}

@INPROCEEDINGS{angelix,
  title     = {Angelix: {S}calable multiline program patch synthesis via symbolic
               analysis},
  booktitle = "International Conference on Software Engineering",
  series = "ICSE '16",
  author    = "Mechtaev, S. and Yi, J. and Roychoudhury, A.",
  pages     = "691--701",
  year      =  2016,
  keywords  = "angelic forest; multiline patch; program repair; scalable
               semantics-based repair"
}

@INPROCEEDINGS{semfix,
  title     = {{SemFix: Program Repair via Semantic Analysis}},
  booktitle = "International Conference on Software Engineering",
  series = "ICSE '13",
  author    = "Nguyen, {Hoang D.T.} and Qi, Dawei and Roychoudhury, Abhik and Chandra, Satish",
  year      =  2013
}

@INPROCEEDINGS{directfix,
  title     = {{DirectFix: Looking for Simple Program Repairs}},
  booktitle = "International Conference on Software Engineering",
  series = "ICSE '15",
  author    = "Mechtaev, Sergey and Yi, Jooyong and Roychoudhury, Abhik",
  year      =  2013
}

@INPROCEEDINGS{search-repair,
  title     = {Repairing Programs with Semantic Code Search},
  booktitle = {Automated Software Engineering},
	series = {ASE '15},
  author    = "Ke, Y. and Stolee, K. T. and Le~Goues, C. and Brun, Y.",
  pages     = "295--306",
  year      =  2015,
  keywords  = "program debugging;program diagnostics;software
               quality;AE-repaired programs;C defects;GenProg-repaired
               program;SMT constraints;SearchRepair
               technique;TrpAutoRepair-repaired program;buggy
               code;human-written code fragments;program repair;semantic code
               search;software quality;Benchmark testing;Computer
               bugs;Indexing;Maintenance
               engineering;Semantics;Software;SearchRepair;automated
               repair;debugging;fault localization;repair quality;semantic code
               search"
}

@INPROCEEDINGS{prophet,
  title           = {{Automatic patch generation by learning correct code}},
  booktitle       = "Principles of Programming Languages",
	series = {POPL '16},
  author          = "Long, F. and Rinard, M.",
  pages           = "298--312",
  year            =  2016,
}

@INPROCEEDINGS{hdrepair, 
author={X. D. Le and D. Lo and C. {Le~Goues}},
booktitle={International Conference on Software Analysis, Evolution, and Reengineering}, 
title={History Driven Program Repair}, 
series = {SANER '16},
year={2016}, 
volume={1}, 
pages={213-224}, 
}

@INPROCEEDINGS{soto,
  title     = {{A deeper look into bug fixes: patterns, replacements, deletions,
               and additions}},
  booktitle = "International Conference on Mining
               Software Repositories",
  series  = {MSR '16},
  author    = "Soto, Mauricio and Thung, Ferdian and Wong, Chu-Pan and Le
               Goues, Claire and Lo, David",
  pages     = "512--515",
  year      =  2016,
  keywords  = "automatic error repair; human-like patches; maintainability"
}

@article{sqjo,
author = {Claire {Le Goues} and Stephanie Forrest and Westley Weimer},
title = {Current Challenges in Automatic Software Repair},
journal ={Software Quality Jornal},
volume = {21},
issue = {3},
year = {2013},
pages = {421-443},
}
@INPROCEEDINGS{ae,
  title     = {{Leveraging program equivalence for adaptive program repair:
               Models and first results}},
  booktitle = "International Conference on Automated Software Engineering",
  series = "ASE '13",
  author    = "Weimer, W. and Fry, Z. P. and Forrest, S.",
  abstract  = "Software bugs remain a compelling problem. Automated program
               repair is a promising approach for reducing cost, and many
               methods have recently demonstrated positive results. However,
               success on any particular bug is variable, as is the cost to
               find a repair. This paper focuses on generate-and-validate
               repair methods that enumerate candidate repairs and use test
               cases to define correct behavior. We formalize repair cost in
               terms of test executions, which dominate most test-based repair
               algorithms. Insights from this model lead to a novel
               deterministic repair algorithm that computes a patch quotient
               space with respect to an approximate semantic equivalence
               relation. This allows syntactic and dataflow analysis techniques
               to dramatically reduce the repair search space.
               Generate-and-validate program repair is shown to be a dual of
               mutation testing, suggesting several possible
               cross-fertilizations. Evaluating on 105 real-world bugs in
               programs totaling 5MLOC and involving 10,000 tests, our new
               algorithm requires an order-of-magnitude fewer test evaluations
               than the previous state-of-the-art and is over three times more
               efficient monetarily.",
  pages     = "356--366",
  year      =  2013,
  keywords  = "cost reduction;data flow analysis;deterministic
               algorithms;program debugging;program testing;software
               maintenance;adaptive program repair;approximate semantic
               equivalence relation;automated program repair;cost
               reduction;cross-fertilizations;dataflow analysis
               techniques;deterministic repair algorithm;generate-and-validate
               program repair methods;mutation testing;patch quotient
               space;program equivalence;repair cost;repair search space
               reduction;software bugs;syntactic analysis techniques;test
               cases;test-based repair algorithms;Adaptation models;Algorithm
               design and analysis;Approximation algorithms;Maintenance
               engineering;Optimization;Search problems;Testing;Automated
               program repair;mutation testing;program equivalence;search-based
               software engineering"
}

@article{feldt1998generating,
  title={Generating diverse software versions with genetic programming: {A}n experimental study},
  author={Feldt, R.},
  journal={IEEE Proceedings-Software},
  volume={145},
  number={6},
  pages={228--236},
  year={1998}
}

@article{daikon,
   author = {Ernst, M. D. and Perkins, J. H. and Guo, P. J. and
	McCamant, S. and Pacheco, C. and Tschantz, M. S. and
	Xiao, C.},
   title = {{The {Daikon} system for dynamic detection of likely invariants}},
   journal = {Science of Computer Programming},
   volume = {69},
   number = {1--3},
   pages = {35--45},
   year = {2007}
}

@ARTICLE{nsgaii, 
author={K. Deb and A. Pratap and S. Agarwal and T. Meyarivan}, 
journal={IEEE Trans. Evolutionary Comp.}, 
title={A fast and elitist multiobjective genetic algorithm: {NSGA-II}}, 
year={2002}, 
volume={6}, 
number={2}, 
pages={182-197}
}

@inproceedings{defects4j,
   author = {Just, R. and Jalali, D. and Ernst, M. D.},
   title = {{Defects4J}: A database of existing faults to enable
	controlled testing studies for {J}ava programs},
   booktitle = {International Symposium on Software
	Testing and Analysis (ISSTA)},
   pages = {437--440},
   year = {2014}
}

@inproceedings{d4j-dissection,
 title = {Dissection of a Bug Dataset: Anatomy of 395 Patches from Defects4J},
 author = {Sobreira, Victor and Durieux, Thomas and Madeiral, Fernanda and Monperrus, Martin and Maia, Marcelo A.},
 url = {https://arxiv.org/pdf/1801.06393},
 booktitle = {{SANER 2018 - 25th edition of the IEEE International Conference on Software Analysis, Evolution and Reengineering}},
 year = {2018},
 doi = {10.1109/SANER.2018.8330203},
}

@inproceedings{source-code-checkpoint,
 title = {A Novel Fitness Function for Automated Program Repair Based on Source Code Checkpoints},
 author = {de Souza, E. F. and Le Goues, C. and Camilo-Junior, C. G.},
 booktitle = {Genetic and Evolutionary Computation Conference},
 series={GECCO '18},
 year = {2018}
}

@inproceedings{mut-analysis,
 title = {An Investigation into the Use of Mutation Analysis for Automated Program Repair},
 author = {Timperley, C. S. and Stepney, S. and Le~Goues, C.},
 booktitle = {International Symposium on Search Based Software Engineering},
 series={SSBSE '17},
 year={2017},
 pages = {99--114}
}

@article{Xuan17,
  author = {Xuan, J. and Martinez, M. and Demarco, F. and Clement, M. and Marcote, S. R. L. and Durieux, T. and Le~Berre, D. and Monperrus, M.},
  title = {Nopol: {Automatic} Repair of Conditional Statement Bugs in {Java} Programs},
  journal = {IEEE Trans. Software Eng.},
  volume = {43},
  number = {1},
  pages = {34--55},
  year = {2017},
}

@book{Koza92,
 	publisher = {MIT Press},
 	year = {1992},
 	author = {Koza, J. R.},
 	title = {Genetic Programming: {On} the Programming of Computers by Means of Natural Selection},
}

@inproceedings{Grefenstette1985,
 author = {Grefenstette, John J. and Fitzpatrick, J. Michael},
 title = {Genetic Search with Approximate Function Evaluation},
 booktitle = {International Conference on Genetic Algorithms},
 year = {1985},
 isbn = {0-8058-0426-9},
 pages = {112--120},
 numpages = {9},
 url = {http://dl.acm.org/citation.cfm?id=645511.657078},
 acmid = {657078},
 publisher = {L. Erlbaum Associates Inc.},
 address = {Hillsdale, NJ, USA},
} 
@inproceedings{arcuri-2008,
 title = {A novel co-evolutionary approach to automatic software bug fixing},
 author = {Andrea Arcuri and Xin Yao},
 url = {https://www.cs.bham.ac.uk/~xin/papers/EC0063Arcuri.pdf},
 booktitle = {2008 IEEE Congress on Evolutionary Computation (CEC 2008)},
 year = {2008},
 pages = {162--168},
}

@techreport{introclassjava,
 title = {{IntroClassJava}: {A} Benchmark of 297 Small and Buggy {Java} Programs},
 author = {Durieux, T. and Monperrus, M.},
 type = {Research Report},
 institution = {{Universite Lille 1}},
 year = {2016},
}

@inproceedings{fdc,
author = {Jones, T. and Forrest, S.},
year = {1995},
title = {Fitness Distance Correlation as a Measure of Problem Difficulty for Genetic Algorithms},
booktitle = {International Conference on Genetic Algorithms},
series = {ICGA '95}
}

@inproceedings{gecco09,
  author = {Forrest, S. and Weimer, W. and Nguyen, T. and Le~Goues, C.},
  title     = {A genetic programming approach to automated software repair},
  year      = {2009},
  pages     = {947-954},
  ee        = {http://doi.acm.org/10.1145/1569901.1570031},
  booktitle     = {Genetic and Evolutionary Computation Conference (GECCO)},
  old_series = {GECCO}
}

@inproceedings{Smith15fse,
  author = {Smith, E. K. and Barr, E. and Le~Goues, C. and Brun, Y.},
  title = {Is the Cure Worse than the Disease? {Overfitting} in Automated
  Program Repair},
  booktitle = {Joint Meeting of the European Software Engineering Conference and the Symposium on the Foundations of Software Engineering},
  venue = {ESEC/FSE},
  year = {2015},
  pages = {532--543},
}

@inproceedings{Le17,
  author    = {Le, X. D. and Chu, D. H. and Lo, D. and {Le~Goues}, C. and Visser, W.},
  title     = {S3: {Syntax-} and semantic-guided repair synthesis via programming by examples},
  booktitle = {Joint Meeting of the European Software Engineering Conference and the Symposium on the Foundations of Software Engineering},
  series = {ESEC/FSE '17},
  pages     = {593--604},
  year      = {2017},
}

@Article{Le2018,
author="Le, X. D.
and Thung, F.
and Lo, D.
and Le~Goues, C.",
title="Overfitting in semantics-based automated program repair",
journal="Empirical Software Engineering",
year="2018",
volume="23",
number="5",
pages="3007--3033"
}

@book{intro-to-ec, 
	place={Berlin}, 
	title={Introduction to evolutionary computing}, 
	publisher={Springer}, 
	author={Eiben, A. E. and Smith, J. E.}, 
	year={2011}
}

@inproceedings{stat-bug-isolation,
    author={Liblit, B. and Naik, M. and Zheng, A. X. and Aiken, A. and Jordan, M. I.},
    year={2005},
    booktitle={Conference on Programming Language Design and Implementation},
    series={PLDI '05},
    title = {Scalable statistical bug isolation},
    pages={15--26}
}

@inproceedings{jacontebe,
    author = {Lin, Z. and Marinov, D. and Zhong, H. and Chen, Y. and Zhao, J.},
    year = {2015},
    booktitle={Conference on Automated Software Engineering},
    series={ASE '15},
    title = {{JaConTeBe}: {A} Benchmark Suite of Real-World {Java} Concurrency Bugs}
}

@inproceedings{bugsdotjar,
 author = {Saha, R. K. and Lyu, Y. and Lam, W. and Yoshida, H. and Prasad, M. R.},
 title = {{Bugs.Jar}: {A} Large-scale, Diverse Dataset of Real-world {J}ava Bugs},
 booktitle = {International Conference on Mining Software Repositories},
 series = {MSR '18},
 year = {2018},
 pages = {10--13}
}

@article{semantic-diversity,
author = {Beadle, L. and Johnson, C.},
year = {2009},
pages = {307-337},
title = {Semantic analysis of program initialisation in genetic programming},
volume = {10},
journal = {Genetic Programming and Evolvable Machines}
}

@article{evosuite,
author = {Fraser, Gordon and Arcuri, Andrea},
 title = {Evo{S}uite: automatic test suite generation for object-oriented software},
 booktitle = {13th European Conference on Foundations of Software Engineering},
 series = {ESEC/FSE '11},
 year = {2011},
 isbn = {978-1-4503-0443-6},
 location = {Szeged, Hungary},
 pages = {416--419},
 numpages = {4},
 doi = {10.1145/2025113.2025179},
 }
 
 @incollection{evosuite-ssbse18-tutorial,
  title={A Tutorial on Using and Extending the {EvoSuite} Search-Based Test Generator},
  author={Fraser, Gordon},
  booktitle={Search-Based Software Engineering},
  pages={106--130},
  year={2018},
  publisher={Springer}
}


@inproceedings{dinglyu,
  author = {Ding, {Zhen~Yu} and Lyu, Yiwei and Timperley, Christopher S. and {Le~Goues}, Claire},
  title = {Leveraging Program Invariants to Promote Population Diversity in Search-Based Automatic Program Repair},
  booktitle = {Genetic Improvement Workshop},
  year = {2019}
}

@inproceedings{klee,
	author={Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
	title={{KLEE}: {U}nassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs},
	booktitle={{USENIX} Symposium on Operating Systems Design and Implementation},
	series={OSDI '08},
	year={2008}
}

@article{d4j-eval,
 title = {Automatic Repair of Real Bugs in Java: A Large-Scale Experiment on the Defects4J Dataset},
 author = {Martinez, Matias and Durieux, Thomas and Sommerard, Romain and Xuan, Jifeng and Monperrus, Martin},
 journal = {{Empirical Software Engineering}},
 publisher = {{Springer Verlag}},
 volume = {22},
 number = {4},
 pages = {1936-1964},
 year = {2017},
 doi = {10.1007/s10664-016-9470-4},
}

@inproceedings{s3,
  author    = {Xuan{-}Bach D. Le and
               Duc{-}Hiep Chu and
               David Lo and
               Claire {Le Goues} and
               Willem Visser},
  title     = {{S3:} {S}yntax- and semantic-guided repair synthesis via programming
               by examples},
  booktitle = {Proceedings of the 2017 11th Joint Meeting of the European
                  Software Engineering Conference and the Symposium on the
                  Foundations of Software Engineering}, 
  series    = {ESEC/FSE '17}, 
  pages     = {593--604},
  year      = {2017},
  doi       = {10.1145/3106237.3106309},
}
@inproceedings{sygus-repair,
  author    = {Xuan{-}Bach D. Le and
               David Lo and
               Claire {Le Goues}},
  title     = {Empirical Study on Synthesis Engines for Semantics-Based Program Repair},
  booktitle = {International Conference on Software Maintenance and Evolution},
  series = {ICSME '16},
  pages     = {423--427},
  year      = {2016},
  doi       = {10.1109/ICSME.2016.68},
}

@inproceedings{codeflaws,
  author    = {Shin Hwei Tan and
               Jooyong Yi and
               Yulis and
               Sergey Mechtaev and
               Abhik Roychoudhury},
  title     = {Codeflaws: a programming competition benchmark for evaluating automated
               program repair tools},
  booktitle = {International Conference on Software Engineering},
  series = {ICSE '18},
  year      = {2017},
  doi       = {10.1109/ICSE-C.2017.76}
}

@inproceedings{le-patch-correctness-eval,
	author={Xuan{-}Bach D. Le and Lingfeng Bao and David Lo and Xin Xia and Shanping Li and Corina Pasareanu},
	title={On Reliability of Patch Correctness Assessment},
	booktitle = {International Conference on Software Engineering},
	series = {ICSE '19},
	year={2019},
	pages = {(to appear)}
}

@inproceedings{difftgen, 
	author={Qi Xin and Steven P. Reiss},
	title={Identifying Test-Suite-Overfitted Patches through Test Case Generation},
	booktitle = {International Symposium on Software Testing and Analysis},
	series= {ISSTA '17},
	year={2017}
}

@inproceedings{zhong2015,
  title={An empirical study on real bug fixes},
  author={Zhong, Hao and Su, Zhendong},
  series={ICSE '15},
  booktitle={International Conference on Software Engineering},
  year={2015},
}

@inproceedings{wang2018,
  title={An empirical study of multi-entity changes in real bug fixes},
  author={Wang, Ye and Meng, Na and Zhong, Hao},
  series={ICSME '18},
  booktitle={International Conference on Software Maintenance and Evolution},
  year={2018},
}

@article{jiang2019cmsuggester,
title={Automatic method change suggestion to complement multi-entity edits},
author={Zijian Jiang and Ye Wang and Hao Zhong and Na Meng},
journal={The Journal of Systems \& Software},
pages={to appear},
year={2019}
}

@inproceedings{saha2019harnessing,
	title={Harnessing evolution for multi-hunk program repair},
	author={Saha, Seemanta and others},
	booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
	pages={13--24},
	year={2019},
	organization={IEEE}
}

@inproceedings{saha2017elixir,
	title={Elixir: Effective object-oriented program repair},
	author={Saha, Ripon K and Lyu, Yingjun and Yoshida, Hiroaki and Prasad, Mukul R},
	booktitle={2017 32nd IEEE/ACM International Conference on Automated Software 
	Engineering (ASE)},
	pages={648--659},
	year={2017},
	organization={IEEE}
}

@inproceedings{bears,
  author = {Fernanda Madeiral and Simon Urli and Marcelo Maia and Martin Monperrus},
  title = {{BEARS}: {An} Extensible {Java} Bug Benchmark for Automatic Program Repair Studies},
  booktitle = {International Conference on Software Analysis, Evolution and Reengineering},
  series={SANER '19},
  year = {2019}
}

@inproceedings{durieux-repair-them-all,
	author={Thomas Durieux and Fernanda Madeiral and Matias Martinez and Rui Abreu},
	title={Empirical Review of {J}ava Program Repair Tools: {A} Large-Scale Experiment on 2,141 Bugs and 23,551 Repair Attempts},
	booktitle={Joint Meeting of the European Software Engineering Conference and the Symposium on the Foundations of Software Engineering},
	series={ESEC/FSE '19},
	year={2019}
}

@inproceedings{fl-multi-faults,
  title={On the influence of multiple faults on coverage-based fault localization},
  author={DiGiuseppe, Nicholas and Jones, James A},
  booktitle={International Symposium on Software Testing and Analysis},
  series={ISSTA '11},
  year={2011}
}

@article{fl-survey-wong,
  title={A survey of software fault localization},
  author={Wong, W Eric and Debroy, Vidroha},
  journal={Department of Computer Science, University of Texas at Dallas, Tech. Rep. UTDCS-45},
  volume={9},
  year={2009}
}

@inproceedings{b2016learning,
	title={A learning-to-rank based fault localization approach using likely invariants},
	author={B. Le, Tien-Duy and Lo, David and Le Goues, Claire and Grunske, Lars},
	booktitle={Proceedings of the 25th International Symposium on Software Testing and Analysis},
	pages={177--188},
	year={2016}
}


@MISC{cambridge-study,
  title={Cambridge University Study States Software Bugs Cost Economy {\$}312 Billion Per Year},
  howpublished={\url{http://www.prweb.com/releases/2013/1/prweb10298185.htm}},
  note={{Accessed March, 2020}}
}
@MISC{tricentis,
	title={Software Fail Watch: 5th Edition},
	howpublished={\url{https://www.tricentis.com/software-fail-watch/}},
	note={{Accessed March, 2020}}
}
	
@inproceedings{long-search-spaces,
	title={An Analysis of the Search Spaces for Generate and Validate Patch Generation Systems},
	author={Fan Long and Martin Rinard},
	booktitle={International Conference on Software Engineering},
	series={ICSE '16},
	year={2016}
}

@article{zou2019empirical,
	title={An empirical study of fault localization families and their combinations},
	author={Zou, Daming and Liang, Jingjing and Xiong, Yingfei and Ernst, Michael D and Zhang, Lu},
	journal={IEEE Transactions on Software Engineering},
	year={2019},
	publisher={IEEE}
}

@inproceedings{pearson2017evaluating,
	title={Evaluating and improving fault localization},
	author={Pearson, Spencer and Campos, Jos{\'e} and Just, Ren{\'e} and Fraser, Gordon 
	and Abreu, 
	Rui and Ernst, Michael D and Pang, Deric and Keller, Benjamin},
	booktitle={2017 IEEE/ACM 39th International Conference on Software Engineering 
	(ICSE)},
	pages={609--620},
	year={2017},
	organization={IEEE}
}

@inproceedings{xin2017leveraging,
	title={Leveraging syntax-related code for automated program repair},
	author={Xin, Qi and Reiss, Steven P},
	booktitle={2017 32nd IEEE/ACM International Conference on Automated Software 
	Engineering (ASE)},
	pages={660--670},
	year={2017},
	organization={IEEE}
}


@inproceedings{tarantula,
	author = {James A. Jones and Mary Jean Harrold and John Stasko},
	title = {Visualization of Test Information to Assist Fault Localization},
	booktitle = {Proceedings of the 24th International Conference on Software Engineering 
	(ICSE)},
	year = {2002},
	month = {May},
	pages = {467--477}
} 

@inproceedings{ochiai,
	title={On the accuracy of spectrum-based fault localization},
	author={Abreu, Rui and Zoeteweij, Peter and Van Gemund, Arjan JC},
	booktitle={Testing: Academic and Industrial Conference Practice and Research 
	Techniques-MUTATION (TAICPART-MUTATION 2007)},
	pages={89--98},
	year={2007},
	organization={IEEE}
}

@article{wong2013dstar,
	title={The DStar method for effective software fault localization},
	author={Wong, W Eric and Debroy, Vidroha and Gao, Ruizhi and Li, Yihao},
	journal={IEEE Transactions on Reliability},
	volume={63},
	number={1},
	pages={290--308},
	year={2013},
	publisher={IEEE}
}


@inproceedings{soot,
	title={Soot-a Java Bytecode Optimization Framework},
	author={Raja Vall\'{e}e-Rai and Phong Co and Etienne Gasgon and Laurie Hendren and Patrick Lam and Vijay Sundaresan},
	booktitle={IBM Center for Advanced Studies Conference},
	series={CASCON '99},
	year={1999}
}

@InProceedings{Konighofer11,
  author =       {Robert K{\"o}nighofer and Roderick Bloem},
  title =        {Automated Error Localization and Correction for Imperative Programs},
  booktitle =    {International Conference on Formal Methods in Computer-Aided Design},
  year =         {2011},
  series =       {FMCAD '11},
  pages =        {91--100},
  month =        {October},
}

@InProceedings{Konighofer12,
  author =       {Robert K{\"o}nighofer and Roderick Bloem},
  title =        {Repair with On-The-Fly Program Analysis},
  booktitle =    {Haifa Verification Conference},
  year =         {2012},
  pages =        {56--71},
}

@InProceedings{DeMarco14,
  author =       {Favio DeMarco and Jifeng Xuan and Daniel {Le~Berre} and Martin Monperrus},
  title =        {Automatic Repair of Buggy If Conditiions and Missing Preconditions with SMT},
  booktitle =    {International Workshop on Constraints in Software Testing, Verification, and Analysis},
  year =         {2014},
  series =       {CSTVA '14},
  pages =        {30--39},
}

@InProceedings{genprog-eight-dollars,
  author =       {Claire {Le~Goues} and Michael Dewey-Vogt and Stephanie Forrest and Westley Weimer},
  title =        {A Systematic Study of Automated Program Repair: Fixing 55 out of 105 bugs for {\$}8 Each},
  booktitle =    {International Conference on Software Engineering},
  year =         {2012},
  series =       {ICSE '12},
}

@inproceedings{tangledchanges,
	author = {Herzig, Kim and Zeller, Andreas},
	title = {The Impact of Tangled Code Changes},
	year = {2013},
	isbn = {9781467329361},
	publisher = {IEEE Press},
	booktitle = {Proceedings of the 10th Working Conference on Mining Software 
	Repositories},
	pages = {121–130},
	numpages = {10},
	location = {San Francisco, CA, USA},
	series = {MSR ’13}
}

@InProceedings{JiaClones,
  author =       {Yue Jia and David Binkley and Mark Harman and Jens Krinke and Makoto Matsushita},
  title =        {{KClone}: A Proposed Approach to Fast Precise Code Clone Detection},
  booktitle =    {International Workshop on Detection of Software Clones},
  year =         {2009},
  series =       {IWSC '09},
}

@InProceedings{microclones,
  author =       {Rijnard van Tonder and Claire {Le~Goues}},
  title =        {Defending Against the Attack of the Micro-clones},
  booktitle =    {International Conference on Program Comprehension},
  year =         {2016},
  series =       {ICPC '16},
}

@inproceedings{weimer2013leveraging,
	title={Leveraging program equivalence for adaptive program repair: Models and first results},
	author={Weimer, Westley and Fry, Zachary P and Forrest, Stephanie},
	booktitle={2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	pages={356--366},
	year={2013},
	organization={IEEE}
}

@article{homs,
	title={Higher order mutation testing},
	author={Jia, Yue and Harman, Mark},
	journal={Information and Software Technology},
	volume={51},
	number={10},
	pages={1379--1393},
	year={2009},
	publisher={Elsevier}
}

@article{b-refactoring,
	title={{B-Refactoring}: Automatic Test Code Refactoring to Improve Dynamic Analysis},
	author = {Jifeng Xuan and Benoit Cornu and Matias Martinez and Benoit Baudry and Lionel Seinturier and Martin Monperrus},
 	journal={Information and Software Technology},
 	volume={76},
  	pages={65--80},
  	year={2016},
  	publisher={Elsevier}
  }
  
@inproceedings{api-refactoring,
  title={An empirical investigation into the role of API-level refactorings during software evolution},
  author={Kim, Miryung and Cai, Dongxiang and Kim, Sunghun},
  booktitle={Proceedings of the 33rd International Conference on Software Engineering},
  pages={151--160},
  year={2011}
}
	
@InProceedings{kclone,
  author =       {Yue Jia and David Binkley and Mark Harman and Jens Krinke and Makoto Matsushita},
  title =        {{KC}lone: A Proposed Approach to Fast Precise Code Clone Detection},
  booktitle =    {International Workshop on Software Clones},
  year =         {2009},
  series =       {IWSC},
}

@MISC{getafix,
  title={Getafix: How Facebook tools learn to fix bugs automatically},
  howpublished={\url{https://engineering.fb.com/developer-tools/getafix-how-facebook-tools-learn-to-fix-bugs-automatically/}},
  note={{Accessed August, 2020}}
}

@MISC{jacoco,
  title={JaCoCo Java Code Coverage Library},
  howpublished={\url{https://www.eclemma.org/jacoco/}},
  note={{Accessed August, 2020}}
}

@Article{cacm19,
  author =       {Claire {Le~Goues} and Michael Pradel and Abhik Roychoudhury},
  title =        {Automated Program Repair},
  journal =      {Communications of the ACM},
  year =         {2019},
  volume =       {62},
  number =       {12},
  pages =        {55--65},
}

